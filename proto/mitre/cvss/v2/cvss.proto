// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package mitre.cvss.v2;

option csharp_namespace = "Mitre.Cvss.V2";
option go_package = "cvssv2";
option java_multiple_files = true;
option java_outer_classname = "CvssProto";
option java_package = "org.zenithar.mitre.cvss.v2";
option objc_class_prefix = "MCX";
option php_namespace = "Mitre\\Cvss\\V2";

// -----------------------------------------------------------------

// AccessVector metric reflects how the vulnerability is exploited.
// The more remote an attacker can be to attack a host, the greater the vulnerability score.
enum AccessVector {
  // Defines undefined access vector
  ACCESS_VECTOR_INVALID = 0;
  // Defines no access vector
  ACCESS_VECTOR_UNDEFINED = 1;
  // A vulnerability exploitable with only local access requires the attacker to have
  // either physical access to the vulnerable system or a local (shell) account.
  // Examples of locally exploitable vulnerabilities are peripheral attacks such as
  // Firewire/USB DMA attacks, and local privilege escalations (e.g., sudo).
  ACCESS_VECTOR_LOCAL = 2;
  // A vulnerability exploitable with adjacent network access requires the attacker
  // to have access to either the broadcast or collision domain of the vulnerable
  // software.  Examples of local networks include local IP subnet, Bluetooth,
  // IEEE 802.11, and local Ethernet segment.
  ACCESS_VECTOR_ADJACENT_NETWORK = 3;
  // A vulnerability exploitable with network access means the vulnerable software
  // is bound to the network stack and the attacker does not require local network
  // access or local access. Such a vulnerability is often termed "remotely exploitable".
  // An example of a network attack is an RPC buffer overflow.
  ACCESS_VECTOR_NETWORK = 4;
}

// This metric measures the complexity of the attack required to exploit the vulnerability
// once an attacker has gained access to the target system. For example, consider a buffer
// overflow in an Internet service: once the target system is located, the attacker can launch
// an exploit at will.
// Other vulnerabilities, however, may require additional steps in order to be exploited.
// For example, a vulnerability in an email client is only exploited after the user downloads
// and opens a tainted attachment.
// The lower the required complexity, the higher the vulnerability score.
enum AccessComplexity {
  // Defines undefined access complexity
  ACCESS_COMPLEXITY_INVALID = 0;
  // Defines no access complexity
  ACCESS_COMPLEXITY_UNDEFINED = 1;
  // Specialized access conditions exist. For example:
  // - In most configurations, the attacking party must already have elevated privileges or spoof additional
  //   systems in addition to the attacking system (e.g., DNS hijacking).
  // - The attack depends on social engineering methods that would be easily detected by knowledgeable people.
  //   For example, the victim must perform several suspicious or atypical actions.
  // - The vulnerable configuration is seen very rarely in practice.
  // - If a race condition exists, the window is very narrow.
  ACCESS_COMPLEXITY_HIGH = 2;
  // The access conditions are somewhat specialized; the following are examples:
  // - The attacking party is limited to a group of systems or users at some level of authorization, possibly
  //   untrusted.
  // - Some information must be gathered before a successful attack can be launched.
  // - The affected configuration is non-default, and is not commonly configured (e.g., a vulnerability
  //   present when a server performs user account authentication via a specific scheme, but not present for
  //   another authentication scheme).
  // - The attack requires a small amount of social engineering that might occasionally fool cautious users
  //   (e.g., phishing attacks that modify a web browsers status bar to show a false link, having to be on
  //   someones buddy list before sending an IM exploit).
  ACCESS_COMPLEXITY_MEDIUM = 3;
  // Specialized access conditions or extenuating circumstances do not exist. The following are examples:
  // - The affected product typically requires access to a wide range of systems and users, possibly
  //   anonymous and untrusted (e.g., Internet-facing web or mail server).
  // - The affected configuration is default or ubiquitous.
  // - The attack can be performed manually and requires little skill or additional information gathering.
  // - The race condition is a lazy one (i.e., it is technically a race but easily winnable).
  ACCESS_COMPLEXITY_LOW = 4;
}

// This metric measures the number of times an attacker must authenticate to a target in order to exploit
// a vulnerability. This metric does not gauge the strength or complexity of the authentication process,
// only that an attacker is required to provide credentials before an exploit may occur.
// The fewer authentication instances that are required, the higher the vulnerability score.
//
// The metric should be applied based on the authentication the attacker requires before launching an attack.
// For example, if a mail server is vulnerable to a command that can be issued before a user authenticates,
// the metric should be scored as "None" because the attacker can launch the exploit before credentials are
// required.  If the vulnerable command is only available after successful authentication, then the
// vulnerability should be scored as "Single" or "Multiple," depending on how many instances of authentication
//  must occur before issuing the command.
enum Authentication {
  // Defines default authentication value
  AUTHENTICATION_INVALID = 0;
  // Defines not defined authentication value
  AUTHENTICATION_UNDEFINED = 1;
  // Exploiting the vulnerability requires that the attacker authenticate two or more times, even if
  // the same credentials are used each time. An example is an attacker authenticating to an operating
  // system in addition to providing credentials to access an application hosted on that system.
  AUTHENTICATION_MULTIPLE = 2;
  // The vulnerability requires an attacker to be logged into the system (such as at a command line or
  // via a desktop session or web interface).
  AUTHENTICATION_SINGLE = 3;
  // Authentication is not required to exploit the vulnerability.
  AUTHENTICATION_NONE = 4;
}

// This metric measures the impact on confidentiality of a successfully exploited vulnerability.
// Confidentiality refers to limiting information access and disclosure to only authorized users, as well
// as preventing access by, or disclosure to, unauthorized ones. Increased confidentiality impact increases
// the vulnerability score.
enum ConfidentialityImpact {
  CONFIDENTIALITY_IMPACT_INVALID = 0;
  CONFIDENTIALITY_IMPACT_UNDEFINED = 1;
  // There is no impact to the confidentiality of the system.
  CONFIDENTIALITY_IMPACT_NONE = 2;
  // There is considerable informational disclosure. Access to some system files is possible, but the
  // attacker does not have control over what is obtained, or the scope of the loss is constrained.
  // An example is a vulnerability that divulges only certain tables in a database.
  CONFIDENTIALITY_IMPACT_PARTIAL = 3;
  // There is total information disclosure, resulting in all system files being revealed. The attacker
  // is able to read all of the system's data (memory, files, etc.)
  CONFIDENTIALITY_IMPACT_COMPLETE = 4;
}

// This metric measures the impact to integrity of a successfully exploited vulnerability.
// Integrity refers to the trustworthiness and guaranteed veracity of information.
// Increased integrity impact increases the vulnerability score.
enum IntegrityImpact {
  INTEGRITY_IMPACT_INVALID = 0;
  INTEGRITY_IMPACT_UNDEFINED = 1;
  // There is no impact to the integrity of the system.
  INTEGRITY_IMPACT_NONE = 2;
  // Modification of some system files or information is possible, but the attacker does not have
  // control over what can be modified, or the scope of what the attacker can affect is limited.
  // For example, system or application files may be overwritten or modified, but either the attacker
  // has no control over which files are affected or the attacker can modify files within only a limited
  // context or scope.
  INTEGRITY_IMPACT_PARTIAL = 3;
  // There is a total compromise of system integrity. There is a complete loss of system protection,
  // resulting in the entire system being compromised. The attacker is able to modify any files on the
  // target system.
  INTEGRITY_IMPACT_COMPLETE = 4;
}

// This metric measures the impact to availability of a successfully exploited vulnerability.
// Availability refers to the accessibility of information resources. Attacks that consume network bandwidth,
// processor cycles, or disk space all impact the availability of a system.
// Increased availability impact increases the vulnerability score.
enum AvailabilityImpact {
  AVAILABILITY_IMPACT_INVALID = 0;
  AVAILABILITY_IMPACT_UNDEFINED = 1;
  // There is no impact to the availability of the system.
  AVAILABILITY_IMPACT_NONE = 2;
  // There is reduced performance or interruptions in resource availability. An example is a network-based
  // flood attack that permits a limited number of successful connections to an Internet service.
  AVAILABILITY_IMPACT_PARTIAL = 3;
  // There is a total shutdown of the affected resource. The attacker can render the resource completely
  // unavailable.
  AVAILABILITY_IMPACT_COMPLETE = 4;
}

// The base metric group captures the characteristics of a vulnerability that are constant with time and
// across user environments. The Access Vector, Access Complexity, and Authentication metrics capture how
// the vulnerability is accessed and whether or not extra conditions are required to exploit it. The three
// impact metrics measure how a vulnerability, if exploited, will directly affect an IT asset, where the
// impacts are independently defined as the degree of loss of confidentiality, integrity, and availability.
// For example, a vulnerability could cause a partial loss of integrity and availability, but no loss of
// confidentiality.
message BaseMetrics {
  AccessVector access_vector = 1;
  AccessComplexity access_complexity = 2;
  Authentication authentication = 3;
  ConfidentialityImpact confidentiality_impact = 4;
  IntegrityImpact integrity_impact = 5;
  AvailabilityImpact availability_impact = 6;
}

// This metric measures the current state of exploit techniques or code availability. Public availability
// of easy-to-use exploit code increases the number of potential attackers by including those who are
// unskilled, thereby increasing the severity of the vulnerability.
//
// Initially, real-world exploitation may only be theoretical. Publication of proof of concept code,
// functional exploit code, or sufficient technical details necessary to exploit the vulnerability may follow.
// Furthermore, the exploit code available may progress from a proof-of-concept demonstration to exploit code
// that is successful in exploiting the vulnerability consistently. In severe cases, it may be delivered as
// the payload of a network-based worm or virus. The more easily a vulnerability can be exploited, the higher
// the vulnerability score.
enum Exploitability {
  EXPLOITABILITY_INVALID = 0;
  // No exploit code is available, or an exploit is entirely theoretical.
  EXPLOITABILITY_UNPROVEN = 1;
  // Proof-of-concept exploit code or an attack demonstration that is not practical for most systems is
  // available. The code or technique is not functional in all situations and may require substantial
  // modification by a skilled attacker.
  EXPLOITABILITY_PROOF_OF_CONCEPT = 2;
  // Functional exploit code is available. The code works in most situations where the vulnerability exists.
  EXPLOITABILITY_FUNCTIONAL = 3;
  // Either the vulnerability is exploitable by functional mobile autonomous code, or no exploit is
  // required (manual trigger) and details are widely available. The code works in every situation,
  // or is actively being delivered via a mobile autonomous agent (such as a worm or virus).
  EXPLOITABILITY_HIGH = 4;
  // Assigning this value to the metric will not influence the score. It is a signal to the equation
  // to skip this metric.
  EXPLOITABILITY_NOT_DEFINED = 5;
}

// The remediation level of a vulnerability is an important factor for prioritization. The typical vulnerability
// is unpatched when initially published. Workarounds or hotfixes may offer interim remediation until an
// official patch or upgrade is issued. Each of these respective stages adjusts the temporal score downwards,
// reflecting the decreasing urgency as remediation becomes final.
// The less official and permanent a fix, the higher the vulnerability score is.
enum RemediationLevel {
  REMEDIATION_LEVEL_INVALID = 0;
  // A complete vendor solution is available. Either the vendor has issued an official patch, or an upgrade is available.
  REMEDIATION_LEVEL_OFFICIAL_FIX = 1;
  // There is an official but temporary fix available. This includes instances where the vendor issues a temporary
  // hotfix, tool, or workaround.
  REMEDIATION_LEVEL_TEMPORARY_FIX = 2;
  // There is an unofficial, non-vendor solution available. In some cases, users of the affected technology
  // will create a patch of their own or provide steps to work around or otherwise mitigate the vulnerability.
  REMEDIATION_LEVEL_WORKAROUND = 3;
  // There is either no solution available or it is impossible to apply.
  REMEDIATION_LEVEL_UNAVAILABLE = 4;
  // Assigning this value to the metric will not influence the score. It is a signal to the equation
  // to skip this metric.
  REMEDIATION_LEVEL_NO_DEFINED = 5;
}

// This metric measures the degree of confidence in the existence of the vulnerability and the credibility of
// the known technical details. Sometimes, only the existence of vulnerabilities are publicized, but without
// specific details. The vulnerability may later be corroborated and then confirmed through acknowledgement
// by the author or vendor of the affected technology. The urgency of a vulnerability is higher when a
// vulnerability is known to exist with certainty. This metric also suggests the level of technical knowledge
// available to would-be attackers. The more a vulnerability is validated by the vendor or other reputable
// sources, the higher the score.
enum ReportConfidence {
  REPORT_CONFIDENCE_INVALID = 0;
  // There is a single unconfirmed source or possibly multiple conflicting reports. There is little
  // confidence in the validity of the reports. An example is a rumor that surfaces from the hacker underground.
  REPORT_CONFIDENCE_UNCONFIRMED = 1;
  // There are multiple non-official sources, possibly including independent security companies or research
  // organizations. At this point there may be conflicting technical details or some other lingering ambiguity.
  REPORT_CONFIDENCE_UNCORROBORATED = 2;
  // The vulnerability has been acknowledged by the vendor or author of the affected technology. The vulnerability
  // may also be Confirmed when its existence is confirmed from an external event such as publication of functional
  // or proof-of-concept exploit code or widespread exploitation.
  REPORT_CONFIDENCE_CONFIRMED = 3;
  // Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
  REPORT_CONFIDENCE_NOT_DEFINED = 4;
}

// The threat posed by a vulnerability may change over time. Three such factors that CVSS captures are:
// confirmation of the technical details of a vulnerability, the remediation status of the vulnerability,
// and the availability of exploit code or techniques. Since temporal metrics are optional they each include
// a metric value that has no effect on the score. This value is used when the user feels the particular
// metric does not apply and wishes to "skip over" it.
message TemporalMetrics {
  Exploitability exploitability = 1;
  RemediationLevel remediation_level = 2;
  ReportConfidence report_confidence = 3;
}

// This metric measures the potential for loss of life or physical assets through damage or theft of property
// or equipment. The metric may also measure economic loss of productivity or revenue.
// Naturally, the greater the damage potential, the higher the vulnerability score.
enum CollateralDamagePotential {
  COLLATERAL_DAMAGE_POTENTIAL_INVALID = 0;
  // There is no potential for loss of life, physical assets, productivity or revenue.
  COLLATERAL_DAMAGE_POTENTIAL_NONE = 1;
  // A successful exploit of this vulnerability may result in slight physical or property damage.
  // Or, there may be a slight loss of revenue or productivity to the organization.
  COLLATERAL_DAMAGE_POTENTIAL_LOW = 2;
  // A successful exploit of this vulnerability may result in moderate physical or property damage.
  // Or, there may be a moderate loss of revenue or productivity to the organization.
  COLLATERAL_DAMAGE_POTENTIAL_LOW_MEDIUM = 3;
  // A successful exploit of this vulnerability may result in significant physical or property damage or loss.
  // Or, there may be a significant loss of revenue or productivity.
  COLLATERAL_DAMAGE_POTENTIAL_MEDIUM_HIGH = 4;
  // A successful exploit of this vulnerability may result in catastrophic physical or property damage and loss.
  // Or, there may be a catastrophic loss of revenue or productivity.
  COLLATERAL_DAMAGE_POTENTIAL_HIGH = 5;
  // Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
  COLLATERAL_DAMAGE_POTENTIAL_NOT_DEFINED = 6;
}

// This metric measures the proportion of vulnerable systems. It is meant as an environment-specific indicator
// in order to approximate the percentage of systems that could be affected by the vulnerability.
// The greater the proportion of vulnerable systems, the higher the score.
enum TargetDistribution {
  TARGET_DISTRIBUTION_INVALID = 0;
  // No target systems exist, or targets are so highly specialized that they only exist in a laboratory setting.
  // Effectively 0% of the environment is at risk.
  TARGET_DISTRIBUTION_NONE = 1;
  // Targets exist inside the environment, but on a small scale. Between 1% - 25% of the total environment is at risk.
  TARGET_DISTRIBUTION_LOW = 2;
  // Targets exist inside the environment, but on a medium scale. Between 26% - 75% of the total environment is at risk.
  TARGET_DISTRIBUTION_MEDIUM = 3;
  // Targets exist inside the environment on a considerable scale. Between 76% - 100% of the total environment is considered at risk.
  TARGET_DISTRIBUTION_HIGH = 4;
  // Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
  TARGET_DISTRIBUTION_NOT_DEFINED = 5;
}

// These metrics enable the analyst to customize the CVSS score depending on the importance of the affected IT asset to a
// users organization, measured in terms of confidentiality, integrity, and availability, That is, if an IT asset supports a
// business function for which availability is most important, the analyst can assign a greater value to availability, relative to
// confidentiality and integrity. Each security requirement has three possible values: low, medium, or high.
//
// The full effect on the environmental score is determined by the corresponding base impact metrics (please note that
// the base confidentiality, integrity and availability impact metrics, themselves, are not changed). That is, these metrics
// modify the environmental score by reweighting the (base) confidentiality, integrity, and availability impact metrics.
// For example, the confidentiality impact (C) metric has increased weight if the confidentiality requirement (CR) is high.
// Likewise, the confidentiality impact metric has decreased weight if the confidentiality requirement is low. The confidentiality
// impact metric weighting is neutral if the confidentiality requirement is medium. This same logic is applied to the integrity
// and availability requirements.
//
// Note that the confidentiality requirement will not affect the environmental score if the (base) confidentiality impact is
// set to none. Also, increasing the confidentiality requirement from medium to high will not change the environmental score
// when the (base) impact metrics are set to complete. This is because the impact sub score (part of the base score that
// calculates impact) is already at a maximum value of 10.
//
// The possible values for the security requirements are listed in Table 12. For brevity, the same table is used for all three
// metrics. The greater the security requirement, the higher the score (remember that medium is considered the default).
// These metrics will modify the score as much as plus or minus 2.5.
enum SecurityRequirement {
  SECURITY_REQUIREMENT_INVALID = 0;
  // Loss of [confidentiality / integrity / availability] is likely to have only a limited adverse effect on the organization
  // or individuals associated with the organization (e.g., employees, customers).
  SECURITY_REQUIREMENT_LOW = 1;
  // Loss of [confidentiality / integrity / availability] is likely to have a serious adverse effect on the organization
  // or individuals associated with the organization (e.g., employees, customers).
  SECURITY_REQUIREMENT_MEDIUM = 2;
  // Loss of [confidentiality / integrity / availability] is likely to have a catastrophic adverse effect on the
  // organization or individuals associated with the organization (e.g., employees, customers).
  SECURITY_REQUIREMENT_HIGH = 3;
  // Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
  SECURITY_REQUIREMENT_NOT_DEFINED = 4;
}

// Different environments can have an immense bearing on the risk that a vulnerability poses to an organization
// and its stakeholders. The CVSS environmental metric group captures the characteristics of a vulnerability
// that are associated with a user's IT environment. Since environmental metrics are optional they each
// include a metric value that has no effect on the score. This value is used when the user feels the
// particular metric does not apply and wishes to "skip over" it.
message EnvironmentalMetrics {
  CollateralDamagePotential collateral_damage_potential = 1;
  TargetDistribution target_distribution = 2;
  SecurityRequirement confidentiality_requirement = 3;
  SecurityRequirement integrity_requirement = 4;
  SecurityRequirement availability_requirement = 5;
}

// Vector defines CVSS object attributes.
message Vector {
  BaseMetrics base_metrics = 1;
  TemporalMetrics temporal_metrics = 2;
  EnvironmentalMetrics environmental_metrics = 3;
}

// Score defines all CVSS intermediate and final calculus.
message Score {
  BaseScore base_score = 1;
  TemporalScore temporal_score = 2;
  EnvironmentalScore environmental_score = 3;
}

// BaseScore regroups all calculus attributes for Base Metrics.
message BaseScore {
  double access_vector = 1;
  double access_complexity = 2;
  double authentication = 3;
  double confidentiality_impact = 4;
  double integrity_impact = 5;
  double availability_impact = 6;
  double impact = 7;
  double f_impact = 8;
  double exploitability = 9;
  double score = 10;
}

// TemporalScore regroups all calculus attributes for Temporal Metrics.
message TemporalScore {
  double exploitability = 1;
  double remediation_level = 2;
  double report_confidence = 3;
  double score = 4;
}

// EnvironmentalScore regroups all calculus attributes for Environmental Metrics.
message EnvironmentalScore {
  double collateral_damage_potential = 1;
  double target_distribution = 2;
  double confidentiality_requirement = 3;
  double integrity_requirement = 4;
  double availability_requirement = 5;
  double adjusted_impact = 6;
  double adjusted_base = 7;
  double adjusted_temporal = 8;
  double score = 9;
}

// Severity scale.
enum Severity {
  SEVERITY_INVALID = 0;
  SEVERITY_UNDEFINED = 1;
  // Low severity (0.0 - 3.9)
  SEVERITY_LOW = 2;
  // Medium severity (4.0 - 6.9)
  SEVERITY_MEDIUM = 3;
  // High severity (7.0 - 10.0)
  SEVERITY_HIGH = 4;
}
