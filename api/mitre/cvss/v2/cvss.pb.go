// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: mitre/cvss/v2/cvss.proto

package cvssv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessVector metric reflects how the vulnerability is exploited.
// The more remote an attacker can be to attack a host, the greater the vulnerability score.
type AccessVector int32

const (
	// Defines undefined access vector
	AccessVector_ACCESS_VECTOR_INVALID AccessVector = 0
	// Defines no access vector
	AccessVector_ACCESS_VECTOR_UNDEFINED AccessVector = 1
	// A vulnerability exploitable with only local access requires the attacker to have
	// either physical access to the vulnerable system or a local (shell) account.
	// Examples of locally exploitable vulnerabilities are peripheral attacks such as
	// Firewire/USB DMA attacks, and local privilege escalations (e.g., sudo).
	AccessVector_ACCESS_VECTOR_LOCAL AccessVector = 2
	// A vulnerability exploitable with adjacent network access requires the attacker
	// to have access to either the broadcast or collision domain of the vulnerable
	// software.  Examples of local networks include local IP subnet, Bluetooth,
	// IEEE 802.11, and local Ethernet segment.
	AccessVector_ACCESS_VECTOR_ADJACENT_NETWORK AccessVector = 3
	// A vulnerability exploitable with network access means the vulnerable software
	// is bound to the network stack and the attacker does not require local network
	// access or local access. Such a vulnerability is often termed "remotely exploitable".
	// An example of a network attack is an RPC buffer overflow.
	AccessVector_ACCESS_VECTOR_NETWORK AccessVector = 4
)

// Enum value maps for AccessVector.
var (
	AccessVector_name = map[int32]string{
		0: "ACCESS_VECTOR_INVALID",
		1: "ACCESS_VECTOR_UNDEFINED",
		2: "ACCESS_VECTOR_LOCAL",
		3: "ACCESS_VECTOR_ADJACENT_NETWORK",
		4: "ACCESS_VECTOR_NETWORK",
	}
	AccessVector_value = map[string]int32{
		"ACCESS_VECTOR_INVALID":          0,
		"ACCESS_VECTOR_UNDEFINED":        1,
		"ACCESS_VECTOR_LOCAL":            2,
		"ACCESS_VECTOR_ADJACENT_NETWORK": 3,
		"ACCESS_VECTOR_NETWORK":          4,
	}
)

func (x AccessVector) Enum() *AccessVector {
	p := new(AccessVector)
	*p = x
	return p
}

func (x AccessVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessVector) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[0].Descriptor()
}

func (AccessVector) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[0]
}

func (x AccessVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessVector.Descriptor instead.
func (AccessVector) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{0}
}

// This metric measures the complexity of the attack required to exploit the vulnerability
// once an attacker has gained access to the target system. For example, consider a buffer
// overflow in an Internet service: once the target system is located, the attacker can launch
// an exploit at will.
// Other vulnerabilities, however, may require additional steps in order to be exploited.
// For example, a vulnerability in an email client is only exploited after the user downloads
// and opens a tainted attachment.
// The lower the required complexity, the higher the vulnerability score.
type AccessComplexity int32

const (
	// Defines undefined access complexity
	AccessComplexity_ACCESS_COMPLEXITY_INVALID AccessComplexity = 0
	// Defines no access complexity
	AccessComplexity_ACCESS_COMPLEXITY_UNDEFINED AccessComplexity = 1
	// Specialized access conditions exist. For example:
	//   - In most configurations, the attacking party must already have elevated privileges or spoof additional
	//     systems in addition to the attacking system (e.g., DNS hijacking).
	//   - The attack depends on social engineering methods that would be easily detected by knowledgeable people.
	//     For example, the victim must perform several suspicious or atypical actions.
	//   - The vulnerable configuration is seen very rarely in practice.
	//   - If a race condition exists, the window is very narrow.
	AccessComplexity_ACCESS_COMPLEXITY_HIGH AccessComplexity = 2
	// The access conditions are somewhat specialized; the following are examples:
	//   - The attacking party is limited to a group of systems or users at some level of authorization, possibly
	//     untrusted.
	//   - Some information must be gathered before a successful attack can be launched.
	//   - The affected configuration is non-default, and is not commonly configured (e.g., a vulnerability
	//     present when a server performs user account authentication via a specific scheme, but not present for
	//     another authentication scheme).
	//   - The attack requires a small amount of social engineering that might occasionally fool cautious users
	//     (e.g., phishing attacks that modify a web browsers status bar to show a false link, having to be on
	//     someones buddy list before sending an IM exploit).
	AccessComplexity_ACCESS_COMPLEXITY_MEDIUM AccessComplexity = 3
	// Specialized access conditions or extenuating circumstances do not exist. The following are examples:
	//   - The affected product typically requires access to a wide range of systems and users, possibly
	//     anonymous and untrusted (e.g., Internet-facing web or mail server).
	//   - The affected configuration is default or ubiquitous.
	//   - The attack can be performed manually and requires little skill or additional information gathering.
	//   - The race condition is a lazy one (i.e., it is technically a race but easily winnable).
	AccessComplexity_ACCESS_COMPLEXITY_LOW AccessComplexity = 4
)

// Enum value maps for AccessComplexity.
var (
	AccessComplexity_name = map[int32]string{
		0: "ACCESS_COMPLEXITY_INVALID",
		1: "ACCESS_COMPLEXITY_UNDEFINED",
		2: "ACCESS_COMPLEXITY_HIGH",
		3: "ACCESS_COMPLEXITY_MEDIUM",
		4: "ACCESS_COMPLEXITY_LOW",
	}
	AccessComplexity_value = map[string]int32{
		"ACCESS_COMPLEXITY_INVALID":   0,
		"ACCESS_COMPLEXITY_UNDEFINED": 1,
		"ACCESS_COMPLEXITY_HIGH":      2,
		"ACCESS_COMPLEXITY_MEDIUM":    3,
		"ACCESS_COMPLEXITY_LOW":       4,
	}
)

func (x AccessComplexity) Enum() *AccessComplexity {
	p := new(AccessComplexity)
	*p = x
	return p
}

func (x AccessComplexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessComplexity) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[1].Descriptor()
}

func (AccessComplexity) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[1]
}

func (x AccessComplexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessComplexity.Descriptor instead.
func (AccessComplexity) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{1}
}

// This metric measures the number of times an attacker must authenticate to a target in order to exploit
// a vulnerability. This metric does not gauge the strength or complexity of the authentication process,
// only that an attacker is required to provide credentials before an exploit may occur.
// The fewer authentication instances that are required, the higher the vulnerability score.
//
// The metric should be applied based on the authentication the attacker requires before launching an attack.
// For example, if a mail server is vulnerable to a command that can be issued before a user authenticates,
// the metric should be scored as "None" because the attacker can launch the exploit before credentials are
// required.  If the vulnerable command is only available after successful authentication, then the
// vulnerability should be scored as "Single" or "Multiple," depending on how many instances of authentication
//
//	must occur before issuing the command.
type Authentication int32

const (
	// Defines default authentication value
	Authentication_AUTHENTICATION_INVALID Authentication = 0
	// Defines not defined authentication value
	Authentication_AUTHENTICATION_UNDEFINED Authentication = 1
	// Exploiting the vulnerability requires that the attacker authenticate two or more times, even if
	// the same credentials are used each time. An example is an attacker authenticating to an operating
	// system in addition to providing credentials to access an application hosted on that system.
	Authentication_AUTHENTICATION_MULTIPLE Authentication = 2
	// The vulnerability requires an attacker to be logged into the system (such as at a command line or
	// via a desktop session or web interface).
	Authentication_AUTHENTICATION_SINGLE Authentication = 3
	// Authentication is not required to exploit the vulnerability.
	Authentication_AUTHENTICATION_NONE Authentication = 4
)

// Enum value maps for Authentication.
var (
	Authentication_name = map[int32]string{
		0: "AUTHENTICATION_INVALID",
		1: "AUTHENTICATION_UNDEFINED",
		2: "AUTHENTICATION_MULTIPLE",
		3: "AUTHENTICATION_SINGLE",
		4: "AUTHENTICATION_NONE",
	}
	Authentication_value = map[string]int32{
		"AUTHENTICATION_INVALID":   0,
		"AUTHENTICATION_UNDEFINED": 1,
		"AUTHENTICATION_MULTIPLE":  2,
		"AUTHENTICATION_SINGLE":    3,
		"AUTHENTICATION_NONE":      4,
	}
)

func (x Authentication) Enum() *Authentication {
	p := new(Authentication)
	*p = x
	return p
}

func (x Authentication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authentication) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[2].Descriptor()
}

func (Authentication) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[2]
}

func (x Authentication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authentication.Descriptor instead.
func (Authentication) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{2}
}

// This metric measures the impact on confidentiality of a successfully exploited vulnerability.
// Confidentiality refers to limiting information access and disclosure to only authorized users, as well
// as preventing access by, or disclosure to, unauthorized ones. Increased confidentiality impact increases
// the vulnerability score.
type ConfidentialityImpact int32

const (
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_INVALID   ConfidentialityImpact = 0
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_UNDEFINED ConfidentialityImpact = 1
	// There is no impact to the confidentiality of the system.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_NONE ConfidentialityImpact = 2
	// There is considerable informational disclosure. Access to some system files is possible, but the
	// attacker does not have control over what is obtained, or the scope of the loss is constrained.
	// An example is a vulnerability that divulges only certain tables in a database.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_PARTIAL ConfidentialityImpact = 3
	// There is total information disclosure, resulting in all system files being revealed. The attacker
	// is able to read all of the system's data (memory, files, etc.)
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_COMPLETE ConfidentialityImpact = 4
)

// Enum value maps for ConfidentialityImpact.
var (
	ConfidentialityImpact_name = map[int32]string{
		0: "CONFIDENTIALITY_IMPACT_INVALID",
		1: "CONFIDENTIALITY_IMPACT_UNDEFINED",
		2: "CONFIDENTIALITY_IMPACT_NONE",
		3: "CONFIDENTIALITY_IMPACT_PARTIAL",
		4: "CONFIDENTIALITY_IMPACT_COMPLETE",
	}
	ConfidentialityImpact_value = map[string]int32{
		"CONFIDENTIALITY_IMPACT_INVALID":   0,
		"CONFIDENTIALITY_IMPACT_UNDEFINED": 1,
		"CONFIDENTIALITY_IMPACT_NONE":      2,
		"CONFIDENTIALITY_IMPACT_PARTIAL":   3,
		"CONFIDENTIALITY_IMPACT_COMPLETE":  4,
	}
)

func (x ConfidentialityImpact) Enum() *ConfidentialityImpact {
	p := new(ConfidentialityImpact)
	*p = x
	return p
}

func (x ConfidentialityImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidentialityImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[3].Descriptor()
}

func (ConfidentialityImpact) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[3]
}

func (x ConfidentialityImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidentialityImpact.Descriptor instead.
func (ConfidentialityImpact) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{3}
}

// This metric measures the impact to integrity of a successfully exploited vulnerability.
// Integrity refers to the trustworthiness and guaranteed veracity of information.
// Increased integrity impact increases the vulnerability score.
type IntegrityImpact int32

const (
	IntegrityImpact_INTEGRITY_IMPACT_INVALID   IntegrityImpact = 0
	IntegrityImpact_INTEGRITY_IMPACT_UNDEFINED IntegrityImpact = 1
	// There is no impact to the integrity of the system.
	IntegrityImpact_INTEGRITY_IMPACT_NONE IntegrityImpact = 2
	// Modification of some system files or information is possible, but the attacker does not have
	// control over what can be modified, or the scope of what the attacker can affect is limited.
	// For example, system or application files may be overwritten or modified, but either the attacker
	// has no control over which files are affected or the attacker can modify files within only a limited
	// context or scope.
	IntegrityImpact_INTEGRITY_IMPACT_PARTIAL IntegrityImpact = 3
	// There is a total compromise of system integrity. There is a complete loss of system protection,
	// resulting in the entire system being compromised. The attacker is able to modify any files on the
	// target system.
	IntegrityImpact_INTEGRITY_IMPACT_COMPLETE IntegrityImpact = 4
)

// Enum value maps for IntegrityImpact.
var (
	IntegrityImpact_name = map[int32]string{
		0: "INTEGRITY_IMPACT_INVALID",
		1: "INTEGRITY_IMPACT_UNDEFINED",
		2: "INTEGRITY_IMPACT_NONE",
		3: "INTEGRITY_IMPACT_PARTIAL",
		4: "INTEGRITY_IMPACT_COMPLETE",
	}
	IntegrityImpact_value = map[string]int32{
		"INTEGRITY_IMPACT_INVALID":   0,
		"INTEGRITY_IMPACT_UNDEFINED": 1,
		"INTEGRITY_IMPACT_NONE":      2,
		"INTEGRITY_IMPACT_PARTIAL":   3,
		"INTEGRITY_IMPACT_COMPLETE":  4,
	}
)

func (x IntegrityImpact) Enum() *IntegrityImpact {
	p := new(IntegrityImpact)
	*p = x
	return p
}

func (x IntegrityImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrityImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[4].Descriptor()
}

func (IntegrityImpact) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[4]
}

func (x IntegrityImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrityImpact.Descriptor instead.
func (IntegrityImpact) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{4}
}

// This metric measures the impact to availability of a successfully exploited vulnerability.
// Availability refers to the accessibility of information resources. Attacks that consume network bandwidth,
// processor cycles, or disk space all impact the availability of a system.
// Increased availability impact increases the vulnerability score.
type AvailabilityImpact int32

const (
	AvailabilityImpact_AVAILABILITY_IMPACT_INVALID   AvailabilityImpact = 0
	AvailabilityImpact_AVAILABILITY_IMPACT_UNDEFINED AvailabilityImpact = 1
	// There is no impact to the availability of the system.
	AvailabilityImpact_AVAILABILITY_IMPACT_NONE AvailabilityImpact = 2
	// There is reduced performance or interruptions in resource availability. An example is a network-based
	// flood attack that permits a limited number of successful connections to an Internet service.
	AvailabilityImpact_AVAILABILITY_IMPACT_PARTIAL AvailabilityImpact = 3
	// There is a total shutdown of the affected resource. The attacker can render the resource completely
	// unavailable.
	AvailabilityImpact_AVAILABILITY_IMPACT_COMPLETE AvailabilityImpact = 4
)

// Enum value maps for AvailabilityImpact.
var (
	AvailabilityImpact_name = map[int32]string{
		0: "AVAILABILITY_IMPACT_INVALID",
		1: "AVAILABILITY_IMPACT_UNDEFINED",
		2: "AVAILABILITY_IMPACT_NONE",
		3: "AVAILABILITY_IMPACT_PARTIAL",
		4: "AVAILABILITY_IMPACT_COMPLETE",
	}
	AvailabilityImpact_value = map[string]int32{
		"AVAILABILITY_IMPACT_INVALID":   0,
		"AVAILABILITY_IMPACT_UNDEFINED": 1,
		"AVAILABILITY_IMPACT_NONE":      2,
		"AVAILABILITY_IMPACT_PARTIAL":   3,
		"AVAILABILITY_IMPACT_COMPLETE":  4,
	}
)

func (x AvailabilityImpact) Enum() *AvailabilityImpact {
	p := new(AvailabilityImpact)
	*p = x
	return p
}

func (x AvailabilityImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[5].Descriptor()
}

func (AvailabilityImpact) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[5]
}

func (x AvailabilityImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityImpact.Descriptor instead.
func (AvailabilityImpact) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{5}
}

// This metric measures the current state of exploit techniques or code availability. Public availability
// of easy-to-use exploit code increases the number of potential attackers by including those who are
// unskilled, thereby increasing the severity of the vulnerability.
//
// Initially, real-world exploitation may only be theoretical. Publication of proof of concept code,
// functional exploit code, or sufficient technical details necessary to exploit the vulnerability may follow.
// Furthermore, the exploit code available may progress from a proof-of-concept demonstration to exploit code
// that is successful in exploiting the vulnerability consistently. In severe cases, it may be delivered as
// the payload of a network-based worm or virus. The more easily a vulnerability can be exploited, the higher
// the vulnerability score.
type Exploitability int32

const (
	Exploitability_EXPLOITABILITY_INVALID Exploitability = 0
	// No exploit code is available, or an exploit is entirely theoretical.
	Exploitability_EXPLOITABILITY_UNPROVEN Exploitability = 1
	// Proof-of-concept exploit code or an attack demonstration that is not practical for most systems is
	// available. The code or technique is not functional in all situations and may require substantial
	// modification by a skilled attacker.
	Exploitability_EXPLOITABILITY_PROOF_OF_CONCEPT Exploitability = 2
	// Functional exploit code is available. The code works in most situations where the vulnerability exists.
	Exploitability_EXPLOITABILITY_FUNCTIONAL Exploitability = 3
	// Either the vulnerability is exploitable by functional mobile autonomous code, or no exploit is
	// required (manual trigger) and details are widely available. The code works in every situation,
	// or is actively being delivered via a mobile autonomous agent (such as a worm or virus).
	Exploitability_EXPLOITABILITY_HIGH Exploitability = 4
	// Assigning this value to the metric will not influence the score. It is a signal to the equation
	// to skip this metric.
	Exploitability_EXPLOITABILITY_NOT_DEFINED Exploitability = 5
)

// Enum value maps for Exploitability.
var (
	Exploitability_name = map[int32]string{
		0: "EXPLOITABILITY_INVALID",
		1: "EXPLOITABILITY_UNPROVEN",
		2: "EXPLOITABILITY_PROOF_OF_CONCEPT",
		3: "EXPLOITABILITY_FUNCTIONAL",
		4: "EXPLOITABILITY_HIGH",
		5: "EXPLOITABILITY_NOT_DEFINED",
	}
	Exploitability_value = map[string]int32{
		"EXPLOITABILITY_INVALID":          0,
		"EXPLOITABILITY_UNPROVEN":         1,
		"EXPLOITABILITY_PROOF_OF_CONCEPT": 2,
		"EXPLOITABILITY_FUNCTIONAL":       3,
		"EXPLOITABILITY_HIGH":             4,
		"EXPLOITABILITY_NOT_DEFINED":      5,
	}
)

func (x Exploitability) Enum() *Exploitability {
	p := new(Exploitability)
	*p = x
	return p
}

func (x Exploitability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Exploitability) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[6].Descriptor()
}

func (Exploitability) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[6]
}

func (x Exploitability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Exploitability.Descriptor instead.
func (Exploitability) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{6}
}

// The remediation level of a vulnerability is an important factor for prioritization. The typical vulnerability
// is unpatched when initially published. Workarounds or hotfixes may offer interim remediation until an
// official patch or upgrade is issued. Each of these respective stages adjusts the temporal score downwards,
// reflecting the decreasing urgency as remediation becomes final.
// The less official and permanent a fix, the higher the vulnerability score is.
type RemediationLevel int32

const (
	RemediationLevel_REMEDIATION_LEVEL_INVALID RemediationLevel = 0
	// A complete vendor solution is available. Either the vendor has issued an official patch, or an upgrade is available.
	RemediationLevel_REMEDIATION_LEVEL_OFFICIAL_FIX RemediationLevel = 1
	// There is an official but temporary fix available. This includes instances where the vendor issues a temporary
	// hotfix, tool, or workaround.
	RemediationLevel_REMEDIATION_LEVEL_TEMPORARY_FIX RemediationLevel = 2
	// There is an unofficial, non-vendor solution available. In some cases, users of the affected technology
	// will create a patch of their own or provide steps to work around or otherwise mitigate the vulnerability.
	RemediationLevel_REMEDIATION_LEVEL_WORKAROUND RemediationLevel = 3
	// There is either no solution available or it is impossible to apply.
	RemediationLevel_REMEDIATION_LEVEL_UNAVAILABLE RemediationLevel = 4
	// Assigning this value to the metric will not influence the score. It is a signal to the equation
	// to skip this metric.
	RemediationLevel_REMEDIATION_LEVEL_NO_DEFINED RemediationLevel = 5
)

// Enum value maps for RemediationLevel.
var (
	RemediationLevel_name = map[int32]string{
		0: "REMEDIATION_LEVEL_INVALID",
		1: "REMEDIATION_LEVEL_OFFICIAL_FIX",
		2: "REMEDIATION_LEVEL_TEMPORARY_FIX",
		3: "REMEDIATION_LEVEL_WORKAROUND",
		4: "REMEDIATION_LEVEL_UNAVAILABLE",
		5: "REMEDIATION_LEVEL_NO_DEFINED",
	}
	RemediationLevel_value = map[string]int32{
		"REMEDIATION_LEVEL_INVALID":       0,
		"REMEDIATION_LEVEL_OFFICIAL_FIX":  1,
		"REMEDIATION_LEVEL_TEMPORARY_FIX": 2,
		"REMEDIATION_LEVEL_WORKAROUND":    3,
		"REMEDIATION_LEVEL_UNAVAILABLE":   4,
		"REMEDIATION_LEVEL_NO_DEFINED":    5,
	}
)

func (x RemediationLevel) Enum() *RemediationLevel {
	p := new(RemediationLevel)
	*p = x
	return p
}

func (x RemediationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemediationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[7].Descriptor()
}

func (RemediationLevel) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[7]
}

func (x RemediationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemediationLevel.Descriptor instead.
func (RemediationLevel) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{7}
}

// This metric measures the degree of confidence in the existence of the vulnerability and the credibility of
// the known technical details. Sometimes, only the existence of vulnerabilities are publicized, but without
// specific details. The vulnerability may later be corroborated and then confirmed through acknowledgement
// by the author or vendor of the affected technology. The urgency of a vulnerability is higher when a
// vulnerability is known to exist with certainty. This metric also suggests the level of technical knowledge
// available to would-be attackers. The more a vulnerability is validated by the vendor or other reputable
// sources, the higher the score.
type ReportConfidence int32

const (
	ReportConfidence_REPORT_CONFIDENCE_INVALID ReportConfidence = 0
	// There is a single unconfirmed source or possibly multiple conflicting reports. There is little
	// confidence in the validity of the reports. An example is a rumor that surfaces from the hacker underground.
	ReportConfidence_REPORT_CONFIDENCE_UNCONFIRMED ReportConfidence = 1
	// There are multiple non-official sources, possibly including independent security companies or research
	// organizations. At this point there may be conflicting technical details or some other lingering ambiguity.
	ReportConfidence_REPORT_CONFIDENCE_UNCORROBORATED ReportConfidence = 2
	// The vulnerability has been acknowledged by the vendor or author of the affected technology. The vulnerability
	// may also be Confirmed when its existence is confirmed from an external event such as publication of functional
	// or proof-of-concept exploit code or widespread exploitation.
	ReportConfidence_REPORT_CONFIDENCE_CONFIRMED ReportConfidence = 3
	// Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
	ReportConfidence_REPORT_CONFIDENCE_NOT_DEFINED ReportConfidence = 4
)

// Enum value maps for ReportConfidence.
var (
	ReportConfidence_name = map[int32]string{
		0: "REPORT_CONFIDENCE_INVALID",
		1: "REPORT_CONFIDENCE_UNCONFIRMED",
		2: "REPORT_CONFIDENCE_UNCORROBORATED",
		3: "REPORT_CONFIDENCE_CONFIRMED",
		4: "REPORT_CONFIDENCE_NOT_DEFINED",
	}
	ReportConfidence_value = map[string]int32{
		"REPORT_CONFIDENCE_INVALID":        0,
		"REPORT_CONFIDENCE_UNCONFIRMED":    1,
		"REPORT_CONFIDENCE_UNCORROBORATED": 2,
		"REPORT_CONFIDENCE_CONFIRMED":      3,
		"REPORT_CONFIDENCE_NOT_DEFINED":    4,
	}
)

func (x ReportConfidence) Enum() *ReportConfidence {
	p := new(ReportConfidence)
	*p = x
	return p
}

func (x ReportConfidence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportConfidence) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[8].Descriptor()
}

func (ReportConfidence) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[8]
}

func (x ReportConfidence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportConfidence.Descriptor instead.
func (ReportConfidence) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{8}
}

// This metric measures the potential for loss of life or physical assets through damage or theft of property
// or equipment. The metric may also measure economic loss of productivity or revenue.
// Naturally, the greater the damage potential, the higher the vulnerability score.
type CollateralDamagePotential int32

const (
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_INVALID CollateralDamagePotential = 0
	// There is no potential for loss of life, physical assets, productivity or revenue.
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_NONE CollateralDamagePotential = 1
	// A successful exploit of this vulnerability may result in slight physical or property damage.
	// Or, there may be a slight loss of revenue or productivity to the organization.
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_LOW CollateralDamagePotential = 2
	// A successful exploit of this vulnerability may result in moderate physical or property damage.
	// Or, there may be a moderate loss of revenue or productivity to the organization.
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_LOW_MEDIUM CollateralDamagePotential = 3
	// A successful exploit of this vulnerability may result in significant physical or property damage or loss.
	// Or, there may be a significant loss of revenue or productivity.
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_MEDIUM_HIGH CollateralDamagePotential = 4
	// A successful exploit of this vulnerability may result in catastrophic physical or property damage and loss.
	// Or, there may be a catastrophic loss of revenue or productivity.
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_HIGH CollateralDamagePotential = 5
	// Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
	CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_NOT_DEFINED CollateralDamagePotential = 6
)

// Enum value maps for CollateralDamagePotential.
var (
	CollateralDamagePotential_name = map[int32]string{
		0: "COLLATERAL_DAMAGE_POTENTIAL_INVALID",
		1: "COLLATERAL_DAMAGE_POTENTIAL_NONE",
		2: "COLLATERAL_DAMAGE_POTENTIAL_LOW",
		3: "COLLATERAL_DAMAGE_POTENTIAL_LOW_MEDIUM",
		4: "COLLATERAL_DAMAGE_POTENTIAL_MEDIUM_HIGH",
		5: "COLLATERAL_DAMAGE_POTENTIAL_HIGH",
		6: "COLLATERAL_DAMAGE_POTENTIAL_NOT_DEFINED",
	}
	CollateralDamagePotential_value = map[string]int32{
		"COLLATERAL_DAMAGE_POTENTIAL_INVALID":     0,
		"COLLATERAL_DAMAGE_POTENTIAL_NONE":        1,
		"COLLATERAL_DAMAGE_POTENTIAL_LOW":         2,
		"COLLATERAL_DAMAGE_POTENTIAL_LOW_MEDIUM":  3,
		"COLLATERAL_DAMAGE_POTENTIAL_MEDIUM_HIGH": 4,
		"COLLATERAL_DAMAGE_POTENTIAL_HIGH":        5,
		"COLLATERAL_DAMAGE_POTENTIAL_NOT_DEFINED": 6,
	}
)

func (x CollateralDamagePotential) Enum() *CollateralDamagePotential {
	p := new(CollateralDamagePotential)
	*p = x
	return p
}

func (x CollateralDamagePotential) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollateralDamagePotential) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[9].Descriptor()
}

func (CollateralDamagePotential) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[9]
}

func (x CollateralDamagePotential) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollateralDamagePotential.Descriptor instead.
func (CollateralDamagePotential) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{9}
}

// This metric measures the proportion of vulnerable systems. It is meant as an environment-specific indicator
// in order to approximate the percentage of systems that could be affected by the vulnerability.
// The greater the proportion of vulnerable systems, the higher the score.
type TargetDistribution int32

const (
	TargetDistribution_TARGET_DISTRIBUTION_INVALID TargetDistribution = 0
	// No target systems exist, or targets are so highly specialized that they only exist in a laboratory setting.
	// Effectively 0% of the environment is at risk.
	TargetDistribution_TARGET_DISTRIBUTION_NONE TargetDistribution = 1
	// Targets exist inside the environment, but on a small scale. Between 1% - 25% of the total environment is at risk.
	TargetDistribution_TARGET_DISTRIBUTION_LOW TargetDistribution = 2
	// Targets exist inside the environment, but on a medium scale. Between 26% - 75% of the total environment is at risk.
	TargetDistribution_TARGET_DISTRIBUTION_MEDIUM TargetDistribution = 3
	// Targets exist inside the environment on a considerable scale. Between 76% - 100% of the total environment is considered at risk.
	TargetDistribution_TARGET_DISTRIBUTION_HIGH TargetDistribution = 4
	// Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
	TargetDistribution_TARGET_DISTRIBUTION_NOT_DEFINED TargetDistribution = 5
)

// Enum value maps for TargetDistribution.
var (
	TargetDistribution_name = map[int32]string{
		0: "TARGET_DISTRIBUTION_INVALID",
		1: "TARGET_DISTRIBUTION_NONE",
		2: "TARGET_DISTRIBUTION_LOW",
		3: "TARGET_DISTRIBUTION_MEDIUM",
		4: "TARGET_DISTRIBUTION_HIGH",
		5: "TARGET_DISTRIBUTION_NOT_DEFINED",
	}
	TargetDistribution_value = map[string]int32{
		"TARGET_DISTRIBUTION_INVALID":     0,
		"TARGET_DISTRIBUTION_NONE":        1,
		"TARGET_DISTRIBUTION_LOW":         2,
		"TARGET_DISTRIBUTION_MEDIUM":      3,
		"TARGET_DISTRIBUTION_HIGH":        4,
		"TARGET_DISTRIBUTION_NOT_DEFINED": 5,
	}
)

func (x TargetDistribution) Enum() *TargetDistribution {
	p := new(TargetDistribution)
	*p = x
	return p
}

func (x TargetDistribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetDistribution) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[10].Descriptor()
}

func (TargetDistribution) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[10]
}

func (x TargetDistribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetDistribution.Descriptor instead.
func (TargetDistribution) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{10}
}

// These metrics enable the analyst to customize the CVSS score depending on the importance of the affected IT asset to a
// users organization, measured in terms of confidentiality, integrity, and availability, That is, if an IT asset supports a
// business function for which availability is most important, the analyst can assign a greater value to availability, relative to
// confidentiality and integrity. Each security requirement has three possible values: low, medium, or high.
//
// The full effect on the environmental score is determined by the corresponding base impact metrics (please note that
// the base confidentiality, integrity and availability impact metrics, themselves, are not changed). That is, these metrics
// modify the environmental score by reweighting the (base) confidentiality, integrity, and availability impact metrics.
// For example, the confidentiality impact (C) metric has increased weight if the confidentiality requirement (CR) is high.
// Likewise, the confidentiality impact metric has decreased weight if the confidentiality requirement is low. The confidentiality
// impact metric weighting is neutral if the confidentiality requirement is medium. This same logic is applied to the integrity
// and availability requirements.
//
// Note that the confidentiality requirement will not affect the environmental score if the (base) confidentiality impact is
// set to none. Also, increasing the confidentiality requirement from medium to high will not change the environmental score
// when the (base) impact metrics are set to complete. This is because the impact sub score (part of the base score that
// calculates impact) is already at a maximum value of 10.
//
// The possible values for the security requirements are listed in Table 12. For brevity, the same table is used for all three
// metrics. The greater the security requirement, the higher the score (remember that medium is considered the default).
// These metrics will modify the score as much as plus or minus 2.5.
type SecurityRequirement int32

const (
	SecurityRequirement_SECURITY_REQUIREMENT_INVALID SecurityRequirement = 0
	// Loss of [confidentiality / integrity / availability] is likely to have only a limited adverse effect on the organization
	// or individuals associated with the organization (e.g., employees, customers).
	SecurityRequirement_SECURITY_REQUIREMENT_LOW SecurityRequirement = 1
	// Loss of [confidentiality / integrity / availability] is likely to have a serious adverse effect on the organization
	// or individuals associated with the organization (e.g., employees, customers).
	SecurityRequirement_SECURITY_REQUIREMENT_MEDIUM SecurityRequirement = 2
	// Loss of [confidentiality / integrity / availability] is likely to have a catastrophic adverse effect on the
	// organization or individuals associated with the organization (e.g., employees, customers).
	SecurityRequirement_SECURITY_REQUIREMENT_HIGH SecurityRequirement = 3
	// Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.
	SecurityRequirement_SECURITY_REQUIREMENT_NOT_DEFINED SecurityRequirement = 4
)

// Enum value maps for SecurityRequirement.
var (
	SecurityRequirement_name = map[int32]string{
		0: "SECURITY_REQUIREMENT_INVALID",
		1: "SECURITY_REQUIREMENT_LOW",
		2: "SECURITY_REQUIREMENT_MEDIUM",
		3: "SECURITY_REQUIREMENT_HIGH",
		4: "SECURITY_REQUIREMENT_NOT_DEFINED",
	}
	SecurityRequirement_value = map[string]int32{
		"SECURITY_REQUIREMENT_INVALID":     0,
		"SECURITY_REQUIREMENT_LOW":         1,
		"SECURITY_REQUIREMENT_MEDIUM":      2,
		"SECURITY_REQUIREMENT_HIGH":        3,
		"SECURITY_REQUIREMENT_NOT_DEFINED": 4,
	}
)

func (x SecurityRequirement) Enum() *SecurityRequirement {
	p := new(SecurityRequirement)
	*p = x
	return p
}

func (x SecurityRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[11].Descriptor()
}

func (SecurityRequirement) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[11]
}

func (x SecurityRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityRequirement.Descriptor instead.
func (SecurityRequirement) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{11}
}

// Severity scale.
type Severity int32

const (
	Severity_SEVERITY_INVALID   Severity = 0
	Severity_SEVERITY_UNDEFINED Severity = 1
	// Low severity (0.0 - 3.9)
	Severity_SEVERITY_LOW Severity = 2
	// Medium severity (4.0 - 6.9)
	Severity_SEVERITY_MEDIUM Severity = 3
	// High severity (7.0 - 10.0)
	Severity_SEVERITY_HIGH Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_INVALID",
		1: "SEVERITY_UNDEFINED",
		2: "SEVERITY_LOW",
		3: "SEVERITY_MEDIUM",
		4: "SEVERITY_HIGH",
	}
	Severity_value = map[string]int32{
		"SEVERITY_INVALID":   0,
		"SEVERITY_UNDEFINED": 1,
		"SEVERITY_LOW":       2,
		"SEVERITY_MEDIUM":    3,
		"SEVERITY_HIGH":      4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v2_cvss_proto_enumTypes[12].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v2_cvss_proto_enumTypes[12]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{12}
}

// The base metric group captures the characteristics of a vulnerability that are constant with time and
// across user environments. The Access Vector, Access Complexity, and Authentication metrics capture how
// the vulnerability is accessed and whether or not extra conditions are required to exploit it. The three
// impact metrics measure how a vulnerability, if exploited, will directly affect an IT asset, where the
// impacts are independently defined as the degree of loss of confidentiality, integrity, and availability.
// For example, a vulnerability could cause a partial loss of integrity and availability, but no loss of
// confidentiality.
type BaseMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVector          AccessVector          `protobuf:"varint,1,opt,name=access_vector,json=accessVector,proto3,enum=mitre.cvss.v2.AccessVector" json:"access_vector,omitempty"`
	AccessComplexity      AccessComplexity      `protobuf:"varint,2,opt,name=access_complexity,json=accessComplexity,proto3,enum=mitre.cvss.v2.AccessComplexity" json:"access_complexity,omitempty"`
	Authentication        Authentication        `protobuf:"varint,3,opt,name=authentication,proto3,enum=mitre.cvss.v2.Authentication" json:"authentication,omitempty"`
	ConfidentialityImpact ConfidentialityImpact `protobuf:"varint,4,opt,name=confidentiality_impact,json=confidentialityImpact,proto3,enum=mitre.cvss.v2.ConfidentialityImpact" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       IntegrityImpact       `protobuf:"varint,5,opt,name=integrity_impact,json=integrityImpact,proto3,enum=mitre.cvss.v2.IntegrityImpact" json:"integrity_impact,omitempty"`
	AvailabilityImpact    AvailabilityImpact    `protobuf:"varint,6,opt,name=availability_impact,json=availabilityImpact,proto3,enum=mitre.cvss.v2.AvailabilityImpact" json:"availability_impact,omitempty"`
}

func (x *BaseMetrics) Reset() {
	*x = BaseMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMetrics) ProtoMessage() {}

func (x *BaseMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMetrics.ProtoReflect.Descriptor instead.
func (*BaseMetrics) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{0}
}

func (x *BaseMetrics) GetAccessVector() AccessVector {
	if x != nil {
		return x.AccessVector
	}
	return AccessVector_ACCESS_VECTOR_INVALID
}

func (x *BaseMetrics) GetAccessComplexity() AccessComplexity {
	if x != nil {
		return x.AccessComplexity
	}
	return AccessComplexity_ACCESS_COMPLEXITY_INVALID
}

func (x *BaseMetrics) GetAuthentication() Authentication {
	if x != nil {
		return x.Authentication
	}
	return Authentication_AUTHENTICATION_INVALID
}

func (x *BaseMetrics) GetConfidentialityImpact() ConfidentialityImpact {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ConfidentialityImpact_CONFIDENTIALITY_IMPACT_INVALID
}

func (x *BaseMetrics) GetIntegrityImpact() IntegrityImpact {
	if x != nil {
		return x.IntegrityImpact
	}
	return IntegrityImpact_INTEGRITY_IMPACT_INVALID
}

func (x *BaseMetrics) GetAvailabilityImpact() AvailabilityImpact {
	if x != nil {
		return x.AvailabilityImpact
	}
	return AvailabilityImpact_AVAILABILITY_IMPACT_INVALID
}

// The threat posed by a vulnerability may change over time. Three such factors that CVSS captures are:
// confirmation of the technical details of a vulnerability, the remediation status of the vulnerability,
// and the availability of exploit code or techniques. Since temporal metrics are optional they each include
// a metric value that has no effect on the score. This value is used when the user feels the particular
// metric does not apply and wishes to "skip over" it.
type TemporalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exploitability   Exploitability   `protobuf:"varint,1,opt,name=exploitability,proto3,enum=mitre.cvss.v2.Exploitability" json:"exploitability,omitempty"`
	RemediationLevel RemediationLevel `protobuf:"varint,2,opt,name=remediation_level,json=remediationLevel,proto3,enum=mitre.cvss.v2.RemediationLevel" json:"remediation_level,omitempty"`
	ReportConfidence ReportConfidence `protobuf:"varint,3,opt,name=report_confidence,json=reportConfidence,proto3,enum=mitre.cvss.v2.ReportConfidence" json:"report_confidence,omitempty"`
}

func (x *TemporalMetrics) Reset() {
	*x = TemporalMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalMetrics) ProtoMessage() {}

func (x *TemporalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalMetrics.ProtoReflect.Descriptor instead.
func (*TemporalMetrics) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{1}
}

func (x *TemporalMetrics) GetExploitability() Exploitability {
	if x != nil {
		return x.Exploitability
	}
	return Exploitability_EXPLOITABILITY_INVALID
}

func (x *TemporalMetrics) GetRemediationLevel() RemediationLevel {
	if x != nil {
		return x.RemediationLevel
	}
	return RemediationLevel_REMEDIATION_LEVEL_INVALID
}

func (x *TemporalMetrics) GetReportConfidence() ReportConfidence {
	if x != nil {
		return x.ReportConfidence
	}
	return ReportConfidence_REPORT_CONFIDENCE_INVALID
}

// Different environments can have an immense bearing on the risk that a vulnerability poses to an organization
// and its stakeholders. The CVSS environmental metric group captures the characteristics of a vulnerability
// that are associated with a user's IT environment. Since environmental metrics are optional they each
// include a metric value that has no effect on the score. This value is used when the user feels the
// particular metric does not apply and wishes to "skip over" it.
type EnvironmentalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollateralDamagePotential  CollateralDamagePotential `protobuf:"varint,1,opt,name=collateral_damage_potential,json=collateralDamagePotential,proto3,enum=mitre.cvss.v2.CollateralDamagePotential" json:"collateral_damage_potential,omitempty"`
	TargetDistribution         TargetDistribution        `protobuf:"varint,2,opt,name=target_distribution,json=targetDistribution,proto3,enum=mitre.cvss.v2.TargetDistribution" json:"target_distribution,omitempty"`
	ConfidentialityRequirement SecurityRequirement       `protobuf:"varint,3,opt,name=confidentiality_requirement,json=confidentialityRequirement,proto3,enum=mitre.cvss.v2.SecurityRequirement" json:"confidentiality_requirement,omitempty"`
	IntegrityRequirement       SecurityRequirement       `protobuf:"varint,4,opt,name=integrity_requirement,json=integrityRequirement,proto3,enum=mitre.cvss.v2.SecurityRequirement" json:"integrity_requirement,omitempty"`
	AvailabilityRequirement    SecurityRequirement       `protobuf:"varint,5,opt,name=availability_requirement,json=availabilityRequirement,proto3,enum=mitre.cvss.v2.SecurityRequirement" json:"availability_requirement,omitempty"`
}

func (x *EnvironmentalMetrics) Reset() {
	*x = EnvironmentalMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentalMetrics) ProtoMessage() {}

func (x *EnvironmentalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentalMetrics.ProtoReflect.Descriptor instead.
func (*EnvironmentalMetrics) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{2}
}

func (x *EnvironmentalMetrics) GetCollateralDamagePotential() CollateralDamagePotential {
	if x != nil {
		return x.CollateralDamagePotential
	}
	return CollateralDamagePotential_COLLATERAL_DAMAGE_POTENTIAL_INVALID
}

func (x *EnvironmentalMetrics) GetTargetDistribution() TargetDistribution {
	if x != nil {
		return x.TargetDistribution
	}
	return TargetDistribution_TARGET_DISTRIBUTION_INVALID
}

func (x *EnvironmentalMetrics) GetConfidentialityRequirement() SecurityRequirement {
	if x != nil {
		return x.ConfidentialityRequirement
	}
	return SecurityRequirement_SECURITY_REQUIREMENT_INVALID
}

func (x *EnvironmentalMetrics) GetIntegrityRequirement() SecurityRequirement {
	if x != nil {
		return x.IntegrityRequirement
	}
	return SecurityRequirement_SECURITY_REQUIREMENT_INVALID
}

func (x *EnvironmentalMetrics) GetAvailabilityRequirement() SecurityRequirement {
	if x != nil {
		return x.AvailabilityRequirement
	}
	return SecurityRequirement_SECURITY_REQUIREMENT_INVALID
}

// Vector defines CVSS object attributes.
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseMetrics          *BaseMetrics          `protobuf:"bytes,1,opt,name=base_metrics,json=baseMetrics,proto3" json:"base_metrics,omitempty"`
	TemporalMetrics      *TemporalMetrics      `protobuf:"bytes,2,opt,name=temporal_metrics,json=temporalMetrics,proto3" json:"temporal_metrics,omitempty"`
	EnvironmentalMetrics *EnvironmentalMetrics `protobuf:"bytes,3,opt,name=environmental_metrics,json=environmentalMetrics,proto3" json:"environmental_metrics,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{3}
}

func (x *Vector) GetBaseMetrics() *BaseMetrics {
	if x != nil {
		return x.BaseMetrics
	}
	return nil
}

func (x *Vector) GetTemporalMetrics() *TemporalMetrics {
	if x != nil {
		return x.TemporalMetrics
	}
	return nil
}

func (x *Vector) GetEnvironmentalMetrics() *EnvironmentalMetrics {
	if x != nil {
		return x.EnvironmentalMetrics
	}
	return nil
}

// Score defines all CVSS intermediate and final calculus.
type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore          *BaseScore          `protobuf:"bytes,1,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
	TemporalScore      *TemporalScore      `protobuf:"bytes,2,opt,name=temporal_score,json=temporalScore,proto3" json:"temporal_score,omitempty"`
	EnvironmentalScore *EnvironmentalScore `protobuf:"bytes,3,opt,name=environmental_score,json=environmentalScore,proto3" json:"environmental_score,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{4}
}

func (x *Score) GetBaseScore() *BaseScore {
	if x != nil {
		return x.BaseScore
	}
	return nil
}

func (x *Score) GetTemporalScore() *TemporalScore {
	if x != nil {
		return x.TemporalScore
	}
	return nil
}

func (x *Score) GetEnvironmentalScore() *EnvironmentalScore {
	if x != nil {
		return x.EnvironmentalScore
	}
	return nil
}

// BaseScore regroups all calculus attributes for Base Metrics.
type BaseScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessVector          float64 `protobuf:"fixed64,1,opt,name=access_vector,json=accessVector,proto3" json:"access_vector,omitempty"`
	AccessComplexity      float64 `protobuf:"fixed64,2,opt,name=access_complexity,json=accessComplexity,proto3" json:"access_complexity,omitempty"`
	Authentication        float64 `protobuf:"fixed64,3,opt,name=authentication,proto3" json:"authentication,omitempty"`
	ConfidentialityImpact float64 `protobuf:"fixed64,4,opt,name=confidentiality_impact,json=confidentialityImpact,proto3" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       float64 `protobuf:"fixed64,5,opt,name=integrity_impact,json=integrityImpact,proto3" json:"integrity_impact,omitempty"`
	AvailabilityImpact    float64 `protobuf:"fixed64,6,opt,name=availability_impact,json=availabilityImpact,proto3" json:"availability_impact,omitempty"`
	Impact                float64 `protobuf:"fixed64,7,opt,name=impact,proto3" json:"impact,omitempty"`
	FImpact               float64 `protobuf:"fixed64,8,opt,name=f_impact,json=fImpact,proto3" json:"f_impact,omitempty"`
	Exploitability        float64 `protobuf:"fixed64,9,opt,name=exploitability,proto3" json:"exploitability,omitempty"`
	Score                 float64 `protobuf:"fixed64,10,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *BaseScore) Reset() {
	*x = BaseScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseScore) ProtoMessage() {}

func (x *BaseScore) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseScore.ProtoReflect.Descriptor instead.
func (*BaseScore) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{5}
}

func (x *BaseScore) GetAccessVector() float64 {
	if x != nil {
		return x.AccessVector
	}
	return 0
}

func (x *BaseScore) GetAccessComplexity() float64 {
	if x != nil {
		return x.AccessComplexity
	}
	return 0
}

func (x *BaseScore) GetAuthentication() float64 {
	if x != nil {
		return x.Authentication
	}
	return 0
}

func (x *BaseScore) GetConfidentialityImpact() float64 {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return 0
}

func (x *BaseScore) GetIntegrityImpact() float64 {
	if x != nil {
		return x.IntegrityImpact
	}
	return 0
}

func (x *BaseScore) GetAvailabilityImpact() float64 {
	if x != nil {
		return x.AvailabilityImpact
	}
	return 0
}

func (x *BaseScore) GetImpact() float64 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *BaseScore) GetFImpact() float64 {
	if x != nil {
		return x.FImpact
	}
	return 0
}

func (x *BaseScore) GetExploitability() float64 {
	if x != nil {
		return x.Exploitability
	}
	return 0
}

func (x *BaseScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// TemporalScore regroups all calculus attributes for Temporal Metrics.
type TemporalScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exploitability   float64 `protobuf:"fixed64,1,opt,name=exploitability,proto3" json:"exploitability,omitempty"`
	RemediationLevel float64 `protobuf:"fixed64,2,opt,name=remediation_level,json=remediationLevel,proto3" json:"remediation_level,omitempty"`
	ReportConfidence float64 `protobuf:"fixed64,3,opt,name=report_confidence,json=reportConfidence,proto3" json:"report_confidence,omitempty"`
	Score            float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *TemporalScore) Reset() {
	*x = TemporalScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporalScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalScore) ProtoMessage() {}

func (x *TemporalScore) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalScore.ProtoReflect.Descriptor instead.
func (*TemporalScore) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{6}
}

func (x *TemporalScore) GetExploitability() float64 {
	if x != nil {
		return x.Exploitability
	}
	return 0
}

func (x *TemporalScore) GetRemediationLevel() float64 {
	if x != nil {
		return x.RemediationLevel
	}
	return 0
}

func (x *TemporalScore) GetReportConfidence() float64 {
	if x != nil {
		return x.ReportConfidence
	}
	return 0
}

func (x *TemporalScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// EnvironmentalScore regroups all calculus attributes for Environmental Metrics.
type EnvironmentalScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollateralDamagePotential  float64 `protobuf:"fixed64,1,opt,name=collateral_damage_potential,json=collateralDamagePotential,proto3" json:"collateral_damage_potential,omitempty"`
	TargetDistribution         float64 `protobuf:"fixed64,2,opt,name=target_distribution,json=targetDistribution,proto3" json:"target_distribution,omitempty"`
	ConfidentialityRequirement float64 `protobuf:"fixed64,3,opt,name=confidentiality_requirement,json=confidentialityRequirement,proto3" json:"confidentiality_requirement,omitempty"`
	IntegrityRequirement       float64 `protobuf:"fixed64,4,opt,name=integrity_requirement,json=integrityRequirement,proto3" json:"integrity_requirement,omitempty"`
	AvailabilityRequirement    float64 `protobuf:"fixed64,5,opt,name=availability_requirement,json=availabilityRequirement,proto3" json:"availability_requirement,omitempty"`
	AdjustedImpact             float64 `protobuf:"fixed64,6,opt,name=adjusted_impact,json=adjustedImpact,proto3" json:"adjusted_impact,omitempty"`
	AdjustedBase               float64 `protobuf:"fixed64,7,opt,name=adjusted_base,json=adjustedBase,proto3" json:"adjusted_base,omitempty"`
	AdjustedTemporal           float64 `protobuf:"fixed64,8,opt,name=adjusted_temporal,json=adjustedTemporal,proto3" json:"adjusted_temporal,omitempty"`
	Score                      float64 `protobuf:"fixed64,9,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *EnvironmentalScore) Reset() {
	*x = EnvironmentalScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentalScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentalScore) ProtoMessage() {}

func (x *EnvironmentalScore) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v2_cvss_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentalScore.ProtoReflect.Descriptor instead.
func (*EnvironmentalScore) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v2_cvss_proto_rawDescGZIP(), []int{7}
}

func (x *EnvironmentalScore) GetCollateralDamagePotential() float64 {
	if x != nil {
		return x.CollateralDamagePotential
	}
	return 0
}

func (x *EnvironmentalScore) GetTargetDistribution() float64 {
	if x != nil {
		return x.TargetDistribution
	}
	return 0
}

func (x *EnvironmentalScore) GetConfidentialityRequirement() float64 {
	if x != nil {
		return x.ConfidentialityRequirement
	}
	return 0
}

func (x *EnvironmentalScore) GetIntegrityRequirement() float64 {
	if x != nil {
		return x.IntegrityRequirement
	}
	return 0
}

func (x *EnvironmentalScore) GetAvailabilityRequirement() float64 {
	if x != nil {
		return x.AvailabilityRequirement
	}
	return 0
}

func (x *EnvironmentalScore) GetAdjustedImpact() float64 {
	if x != nil {
		return x.AdjustedImpact
	}
	return 0
}

func (x *EnvironmentalScore) GetAdjustedBase() float64 {
	if x != nil {
		return x.AdjustedBase
	}
	return 0
}

func (x *EnvironmentalScore) GetAdjustedTemporal() float64 {
	if x != nil {
		return x.AdjustedTemporal
	}
	return 0
}

func (x *EnvironmentalScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_mitre_cvss_v2_cvss_proto protoreflect.FileDescriptor

var file_mitre_cvss_v2_cvss_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x63, 0x76, 0x73, 0x73, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x76, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x22, 0xe0, 0x03, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63,
	0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e,
	0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76,
	0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x22, 0xf4, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x45, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x68, 0x0a, 0x1b,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x19, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x57, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x74,
	0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x58, 0x0a, 0x15,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x52,
	0x0a, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x12,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x12, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x2f, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2a, 0x9e, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x56, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x04, 0x2a, 0xa7, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x2a, 0x9b, 0x01,
	0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0xcb, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x2a, 0xa7, 0x01, 0x0a, 0x0f, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x18, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x04, 0x2a, 0xb9, 0x01, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x2a,
	0xc6, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x4f, 0x46, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x4c,
	0x4f, 0x49, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xe1, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x58, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f,
	0x46, 0x49, 0x58, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x41,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xbe, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x4f,
	0x42, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xbb, 0x02,
	0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x23, 0x43,
	0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f,
	0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4c,
	0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x43,
	0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4c, 0x4c,
	0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f,
	0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x12, 0x2b,
	0x0a, 0x27, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xd3, 0x01, 0x0a, 0x12,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0xbb, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0x72, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x42, 0xa6, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x09, 0x43, 0x76, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x63, 0x76, 0x73, 0x73, 0x2f, 0x76,
	0x32, 0x3b, 0x63, 0x76, 0x73, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x4d, 0x43, 0x58, 0xaa, 0x02,
	0x0d, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02,
	0x0d, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x5c, 0x43, 0x76, 0x73, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02,
	0x19, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x5c, 0x43, 0x76, 0x73, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x4d, 0x69, 0x74,
	0x72, 0x65, 0x3a, 0x3a, 0x43, 0x76, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mitre_cvss_v2_cvss_proto_rawDescOnce sync.Once
	file_mitre_cvss_v2_cvss_proto_rawDescData = file_mitre_cvss_v2_cvss_proto_rawDesc
)

func file_mitre_cvss_v2_cvss_proto_rawDescGZIP() []byte {
	file_mitre_cvss_v2_cvss_proto_rawDescOnce.Do(func() {
		file_mitre_cvss_v2_cvss_proto_rawDescData = protoimpl.X.CompressGZIP(file_mitre_cvss_v2_cvss_proto_rawDescData)
	})
	return file_mitre_cvss_v2_cvss_proto_rawDescData
}

var file_mitre_cvss_v2_cvss_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_mitre_cvss_v2_cvss_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mitre_cvss_v2_cvss_proto_goTypes = []interface{}{
	(AccessVector)(0),              // 0: mitre.cvss.v2.AccessVector
	(AccessComplexity)(0),          // 1: mitre.cvss.v2.AccessComplexity
	(Authentication)(0),            // 2: mitre.cvss.v2.Authentication
	(ConfidentialityImpact)(0),     // 3: mitre.cvss.v2.ConfidentialityImpact
	(IntegrityImpact)(0),           // 4: mitre.cvss.v2.IntegrityImpact
	(AvailabilityImpact)(0),        // 5: mitre.cvss.v2.AvailabilityImpact
	(Exploitability)(0),            // 6: mitre.cvss.v2.Exploitability
	(RemediationLevel)(0),          // 7: mitre.cvss.v2.RemediationLevel
	(ReportConfidence)(0),          // 8: mitre.cvss.v2.ReportConfidence
	(CollateralDamagePotential)(0), // 9: mitre.cvss.v2.CollateralDamagePotential
	(TargetDistribution)(0),        // 10: mitre.cvss.v2.TargetDistribution
	(SecurityRequirement)(0),       // 11: mitre.cvss.v2.SecurityRequirement
	(Severity)(0),                  // 12: mitre.cvss.v2.Severity
	(*BaseMetrics)(nil),            // 13: mitre.cvss.v2.BaseMetrics
	(*TemporalMetrics)(nil),        // 14: mitre.cvss.v2.TemporalMetrics
	(*EnvironmentalMetrics)(nil),   // 15: mitre.cvss.v2.EnvironmentalMetrics
	(*Vector)(nil),                 // 16: mitre.cvss.v2.Vector
	(*Score)(nil),                  // 17: mitre.cvss.v2.Score
	(*BaseScore)(nil),              // 18: mitre.cvss.v2.BaseScore
	(*TemporalScore)(nil),          // 19: mitre.cvss.v2.TemporalScore
	(*EnvironmentalScore)(nil),     // 20: mitre.cvss.v2.EnvironmentalScore
}
var file_mitre_cvss_v2_cvss_proto_depIdxs = []int32{
	0,  // 0: mitre.cvss.v2.BaseMetrics.access_vector:type_name -> mitre.cvss.v2.AccessVector
	1,  // 1: mitre.cvss.v2.BaseMetrics.access_complexity:type_name -> mitre.cvss.v2.AccessComplexity
	2,  // 2: mitre.cvss.v2.BaseMetrics.authentication:type_name -> mitre.cvss.v2.Authentication
	3,  // 3: mitre.cvss.v2.BaseMetrics.confidentiality_impact:type_name -> mitre.cvss.v2.ConfidentialityImpact
	4,  // 4: mitre.cvss.v2.BaseMetrics.integrity_impact:type_name -> mitre.cvss.v2.IntegrityImpact
	5,  // 5: mitre.cvss.v2.BaseMetrics.availability_impact:type_name -> mitre.cvss.v2.AvailabilityImpact
	6,  // 6: mitre.cvss.v2.TemporalMetrics.exploitability:type_name -> mitre.cvss.v2.Exploitability
	7,  // 7: mitre.cvss.v2.TemporalMetrics.remediation_level:type_name -> mitre.cvss.v2.RemediationLevel
	8,  // 8: mitre.cvss.v2.TemporalMetrics.report_confidence:type_name -> mitre.cvss.v2.ReportConfidence
	9,  // 9: mitre.cvss.v2.EnvironmentalMetrics.collateral_damage_potential:type_name -> mitre.cvss.v2.CollateralDamagePotential
	10, // 10: mitre.cvss.v2.EnvironmentalMetrics.target_distribution:type_name -> mitre.cvss.v2.TargetDistribution
	11, // 11: mitre.cvss.v2.EnvironmentalMetrics.confidentiality_requirement:type_name -> mitre.cvss.v2.SecurityRequirement
	11, // 12: mitre.cvss.v2.EnvironmentalMetrics.integrity_requirement:type_name -> mitre.cvss.v2.SecurityRequirement
	11, // 13: mitre.cvss.v2.EnvironmentalMetrics.availability_requirement:type_name -> mitre.cvss.v2.SecurityRequirement
	13, // 14: mitre.cvss.v2.Vector.base_metrics:type_name -> mitre.cvss.v2.BaseMetrics
	14, // 15: mitre.cvss.v2.Vector.temporal_metrics:type_name -> mitre.cvss.v2.TemporalMetrics
	15, // 16: mitre.cvss.v2.Vector.environmental_metrics:type_name -> mitre.cvss.v2.EnvironmentalMetrics
	18, // 17: mitre.cvss.v2.Score.base_score:type_name -> mitre.cvss.v2.BaseScore
	19, // 18: mitre.cvss.v2.Score.temporal_score:type_name -> mitre.cvss.v2.TemporalScore
	20, // 19: mitre.cvss.v2.Score.environmental_score:type_name -> mitre.cvss.v2.EnvironmentalScore
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_mitre_cvss_v2_cvss_proto_init() }
func file_mitre_cvss_v2_cvss_proto_init() {
	if File_mitre_cvss_v2_cvss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mitre_cvss_v2_cvss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporalMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentalMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporalScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v2_cvss_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentalScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mitre_cvss_v2_cvss_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mitre_cvss_v2_cvss_proto_goTypes,
		DependencyIndexes: file_mitre_cvss_v2_cvss_proto_depIdxs,
		EnumInfos:         file_mitre_cvss_v2_cvss_proto_enumTypes,
		MessageInfos:      file_mitre_cvss_v2_cvss_proto_msgTypes,
	}.Build()
	File_mitre_cvss_v2_cvss_proto = out.File
	file_mitre_cvss_v2_cvss_proto_rawDesc = nil
	file_mitre_cvss_v2_cvss_proto_goTypes = nil
	file_mitre_cvss_v2_cvss_proto_depIdxs = nil
}
