// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: mitre/cvss/v3/cvss.proto

package cvssv3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This metric reflects the context by which vulnerability exploitation is
// possible. This metric value (and consequently the Base score) will be larger
// the more remote (logically, and physically) an attacker can be in order to
// exploit the vulnerable component. The assumption is that the number of potential
// attackers for a vulnerability that could be exploited from across the Internet
// is larger than the number of potential attackers that could exploit a vulnerability
// requiring physical access to a device, and therefore warrants a greater score.
type AttackVector int32

const (
	AttackVector_ATTACK_VECTOR_INVALID   AttackVector = 0
	AttackVector_ATTACK_VECTOR_UNDEFINED AttackVector = 1
	// A vulnerability exploitable with network access means the vulnerable component
	// is bound to the network stack and the attacker's path is through OSI layer 3
	// (the network layer). Such a vulnerability is often termed "remotely exploitable"
	// and can be thought of as an attack being exploitable one or more network hops
	// away (e.g. across layer 3 boundaries from routers). An example of a network attack
	// is an attacker causing a denial of service (DoS) by sending a specially crafted
	// TCP packet from across the public Internet (e.g. CVE 2004 0230).
	AttackVector_ATTACK_VECTOR_NETWORK AttackVector = 2
	// A vulnerability exploitable with adjacent network access means the vulnerable
	// component is bound to the network stack, however the attack is limited to the
	// same shared physical (e.g. Bluetooth, IEEE 802.11), or logical (e.g. local IP subnet)
	// network, and cannot be performed across an OSI layer 3 boundary (e.g. a router).
	// An example of an Adjacent attack would be an ARP (IPv4) or neighbor discovery (IPv6)
	// flood leading to a denial of service on the local LAN segment. See also CVE 2013 6014.
	AttackVector_ATTACK_VECTOR_ADJACENT AttackVector = 3
	// A vulnerability exploitable with Local access means that the vulnerable component
	// is not bound to the network stack, and the attacker's path is via read/write/execute
	// capabilities. In some cases, the attacker may be logged in locally in order to exploit
	// the vulnerability, otherwise, she may rely on User Interaction to execute a malicious file.
	AttackVector_ATTACK_VECTOR_LOCAL AttackVector = 4
	// A vulnerability exploitable with Physical access requires the attacker to physically
	// touch or manipulate the vulnerable component. Physical interaction may be brief
	// (e.g. evil maid attack [1]) or persistent. An example of such an attack is a cold boot
	// attack which allows an attacker to access to disk encryption keys after gaining physical
	// access to the system, or peripheral attacks such as Firewire/USB Direct Memory Access
	// attacks.
	AttackVector_ATTACK_VECTOR_PHYSICAL AttackVector = 5
)

// Enum value maps for AttackVector.
var (
	AttackVector_name = map[int32]string{
		0: "ATTACK_VECTOR_INVALID",
		1: "ATTACK_VECTOR_UNDEFINED",
		2: "ATTACK_VECTOR_NETWORK",
		3: "ATTACK_VECTOR_ADJACENT",
		4: "ATTACK_VECTOR_LOCAL",
		5: "ATTACK_VECTOR_PHYSICAL",
	}
	AttackVector_value = map[string]int32{
		"ATTACK_VECTOR_INVALID":   0,
		"ATTACK_VECTOR_UNDEFINED": 1,
		"ATTACK_VECTOR_NETWORK":   2,
		"ATTACK_VECTOR_ADJACENT":  3,
		"ATTACK_VECTOR_LOCAL":     4,
		"ATTACK_VECTOR_PHYSICAL":  5,
	}
)

func (x AttackVector) Enum() *AttackVector {
	p := new(AttackVector)
	*p = x
	return p
}

func (x AttackVector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttackVector) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[0].Descriptor()
}

func (AttackVector) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[0]
}

func (x AttackVector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttackVector.Descriptor instead.
func (AttackVector) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{0}
}

// This metric describes the conditions beyond the attacker's control that must exist
// in order to exploit the vulnerability. As described below, such conditions may
// require the collection of more information about the target, the presence of
// certain system configuration settings, or computational exceptions. Importantly,
// the assessment of this metric excludes any requirements for user interaction in
// order to exploit the vulnerability (such conditions are captured in the User
// Interaction metric). This metric value is largest for the least complex attacks.
type AttackComplexity int32

const (
	AttackComplexity_ATTACK_COMPLEXITY_INVALID   AttackComplexity = 0
	AttackComplexity_ATTACK_COMPLEXITY_UNDEFINED AttackComplexity = 1
	// Specialized access conditions or extenuating circumstances do not exist.
	// An attacker can expect repeatable success against the vulnerable component.
	AttackComplexity_ATTACK_COMPLEXITY_LOW AttackComplexity = 2
	// A successful attack depends on conditions beyond the attacker's control.
	// That is, a successful attack cannot be accomplished at will, but requires
	// the attacker to invest in some measurable amount of effort in preparation
	// or execution against the vulnerable component before a successful attack can
	// be expected. 2 For example, a successful attack may depend on an attacker
	// overcoming any of the following conditions:
	//   - The attacker must conduct target-specific reconnaissance. For example, on
	//     target configuration settings, sequence numbers, shared secrets, etc.
	//   - The attacker must prepare the target environment to improve exploit reliability.
	//     For example, repeated exploitation to win a race condition, or overcoming
	//     advanced exploit mitigation techniques.
	//   - The attacker must inject herself into the logical network path between the
	//     target and the resource requested by the victim in order to read and/or
	//     modify network communications (e.g. man in the middle attack).
	AttackComplexity_ATTACK_COMPLEXITY_HIGH AttackComplexity = 3
)

// Enum value maps for AttackComplexity.
var (
	AttackComplexity_name = map[int32]string{
		0: "ATTACK_COMPLEXITY_INVALID",
		1: "ATTACK_COMPLEXITY_UNDEFINED",
		2: "ATTACK_COMPLEXITY_LOW",
		3: "ATTACK_COMPLEXITY_HIGH",
	}
	AttackComplexity_value = map[string]int32{
		"ATTACK_COMPLEXITY_INVALID":   0,
		"ATTACK_COMPLEXITY_UNDEFINED": 1,
		"ATTACK_COMPLEXITY_LOW":       2,
		"ATTACK_COMPLEXITY_HIGH":      3,
	}
)

func (x AttackComplexity) Enum() *AttackComplexity {
	p := new(AttackComplexity)
	*p = x
	return p
}

func (x AttackComplexity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttackComplexity) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[1].Descriptor()
}

func (AttackComplexity) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[1]
}

func (x AttackComplexity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttackComplexity.Descriptor instead.
func (AttackComplexity) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{1}
}

// This metric describes the level of privileges an attacker must possess before
// successfully exploiting the vulnerability. This metric is greatest if no
// privileges are required.
type PrivilegeRequired int32

const (
	PrivilegeRequired_PRIVILEGE_REQUIRED_INVALID   PrivilegeRequired = 0
	PrivilegeRequired_PRIVILEGE_REQUIRED_UNDEFINED PrivilegeRequired = 1
	// The attacker is unauthorized prior to attack, and therefore does not
	// require any access to settings or files to carry out an attack.
	PrivilegeRequired_PRIVILEGE_REQUIRED_NONE PrivilegeRequired = 2
	// The attacker is authorized with (i.e. requires) privileges that provide
	// basic user capabilities that could normally affect only settings and
	// files owned by a user. Alternatively, an attacker with Low privileges may
	// have the ability to cause an impact only to non-sensitive resources.
	PrivilegeRequired_PRIVILEGE_REQUIRED_LOW PrivilegeRequired = 3
	// The attacker is authorized with (i.e. requires) privileges that
	// provide significant (e.g. administrative) control over the vulnerable
	// component that could affect component-wide settings and files.
	PrivilegeRequired_PRIVILEGE_REQUIRED_HIGH PrivilegeRequired = 4
)

// Enum value maps for PrivilegeRequired.
var (
	PrivilegeRequired_name = map[int32]string{
		0: "PRIVILEGE_REQUIRED_INVALID",
		1: "PRIVILEGE_REQUIRED_UNDEFINED",
		2: "PRIVILEGE_REQUIRED_NONE",
		3: "PRIVILEGE_REQUIRED_LOW",
		4: "PRIVILEGE_REQUIRED_HIGH",
	}
	PrivilegeRequired_value = map[string]int32{
		"PRIVILEGE_REQUIRED_INVALID":   0,
		"PRIVILEGE_REQUIRED_UNDEFINED": 1,
		"PRIVILEGE_REQUIRED_NONE":      2,
		"PRIVILEGE_REQUIRED_LOW":       3,
		"PRIVILEGE_REQUIRED_HIGH":      4,
	}
)

func (x PrivilegeRequired) Enum() *PrivilegeRequired {
	p := new(PrivilegeRequired)
	*p = x
	return p
}

func (x PrivilegeRequired) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivilegeRequired) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[2].Descriptor()
}

func (PrivilegeRequired) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[2]
}

func (x PrivilegeRequired) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivilegeRequired.Descriptor instead.
func (PrivilegeRequired) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{2}
}

// This metric captures the requirement for a user, other than the attacker,
// to participate in the successful compromise of the vulnerable component.
// This metric determines whether the vulnerability can be exploited solely at
// the will of the attacker, or whether a separate user (or user-initiated process)
// must participate in some manner. This metric value is greatest when no user
// interaction is required.
type UserInteraction int32

const (
	UserInteraction_USER_INTERACTION_INVALID   UserInteraction = 0
	UserInteraction_USER_INTERACTION_UNDEFINED UserInteraction = 1
	// The vulnerable system can be exploited without interaction from any user.
	UserInteraction_USER_INTERACTION_NONE UserInteraction = 2
	// Successful exploitation of this vulnerability requires a user to take
	// some action before the vulnerability can be exploited. For example, a
	// successful exploit may only be possible during the installation of an
	// application by a system administrator.
	UserInteraction_USER_INTERACTION_REQUIRED UserInteraction = 3
)

// Enum value maps for UserInteraction.
var (
	UserInteraction_name = map[int32]string{
		0: "USER_INTERACTION_INVALID",
		1: "USER_INTERACTION_UNDEFINED",
		2: "USER_INTERACTION_NONE",
		3: "USER_INTERACTION_REQUIRED",
	}
	UserInteraction_value = map[string]int32{
		"USER_INTERACTION_INVALID":   0,
		"USER_INTERACTION_UNDEFINED": 1,
		"USER_INTERACTION_NONE":      2,
		"USER_INTERACTION_REQUIRED":  3,
	}
)

func (x UserInteraction) Enum() *UserInteraction {
	p := new(UserInteraction)
	*p = x
	return p
}

func (x UserInteraction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInteraction) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[3].Descriptor()
}

func (UserInteraction) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[3]
}

func (x UserInteraction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInteraction.Descriptor instead.
func (UserInteraction) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{3}
}

// Scope is used to tell if scoring has impact modification.
type Scope int32

const (
	Scope_SCOPE_INVALID   Scope = 0
	Scope_SCOPE_UNDEFINED Scope = 1
	// An exploited vulnerability can only affect resources managed by the
	// same authority. In this case the vulnerable component and the impacted
	// component are the same.
	Scope_SCOPE_UNCHANGED Scope = 2
	// An exploited vulnerability can affect resources beyond the authorization
	// privileges intended by the vulnerable component. In this case the
	// vulnerable component and the impacted component are different.
	Scope_SCOPE_CHANGED Scope = 3
)

// Enum value maps for Scope.
var (
	Scope_name = map[int32]string{
		0: "SCOPE_INVALID",
		1: "SCOPE_UNDEFINED",
		2: "SCOPE_UNCHANGED",
		3: "SCOPE_CHANGED",
	}
	Scope_value = map[string]int32{
		"SCOPE_INVALID":   0,
		"SCOPE_UNDEFINED": 1,
		"SCOPE_UNCHANGED": 2,
		"SCOPE_CHANGED":   3,
	}
)

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}

func (x Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[4].Descriptor()
}

func (Scope) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[4]
}

func (x Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scope.Descriptor instead.
func (Scope) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{4}
}

// This metric measures the impact to the confidentiality of the information
// resources managed by a software component due to a successfully exploited
// vulnerability. Confidentiality refers to limiting information access and
// disclosure to only authorized users, as well as preventing access by, or
// disclosure to, unauthorized ones. This metric value increases with the
// degree of loss to the impacted component.
type ConfidentialityImpact int32

const (
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_INVALID   ConfidentialityImpact = 0
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_UNDEFINED ConfidentialityImpact = 1
	// There is total loss of confidentiality, resulting in all resources
	// within the impacted component being divulged to the attacker.
	// Alternatively, access to only some restricted information is obtained,
	// but the disclosed information presents a direct, serious impact.
	// For example, an attacker steals the administrator's password, or
	// private encryption keys of a web server.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_HIGH ConfidentialityImpact = 2
	// There is some loss of confidentiality. Access to some restricted
	// information is obtained, but the attacker does not have control over
	// what information is obtained, or the amount or kind of loss is constrained.
	// The information disclosure does not cause a direct, serious loss to
	// the impacted component.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_LOW ConfidentialityImpact = 3
	// There is no loss of confidentiality within the impacted component.
	ConfidentialityImpact_CONFIDENTIALITY_IMPACT_NONE ConfidentialityImpact = 4
)

// Enum value maps for ConfidentialityImpact.
var (
	ConfidentialityImpact_name = map[int32]string{
		0: "CONFIDENTIALITY_IMPACT_INVALID",
		1: "CONFIDENTIALITY_IMPACT_UNDEFINED",
		2: "CONFIDENTIALITY_IMPACT_HIGH",
		3: "CONFIDENTIALITY_IMPACT_LOW",
		4: "CONFIDENTIALITY_IMPACT_NONE",
	}
	ConfidentialityImpact_value = map[string]int32{
		"CONFIDENTIALITY_IMPACT_INVALID":   0,
		"CONFIDENTIALITY_IMPACT_UNDEFINED": 1,
		"CONFIDENTIALITY_IMPACT_HIGH":      2,
		"CONFIDENTIALITY_IMPACT_LOW":       3,
		"CONFIDENTIALITY_IMPACT_NONE":      4,
	}
)

func (x ConfidentialityImpact) Enum() *ConfidentialityImpact {
	p := new(ConfidentialityImpact)
	*p = x
	return p
}

func (x ConfidentialityImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidentialityImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[5].Descriptor()
}

func (ConfidentialityImpact) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[5]
}

func (x ConfidentialityImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidentialityImpact.Descriptor instead.
func (ConfidentialityImpact) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{5}
}

// This metric measures the impact to integrity of a successfully exploited
// vulnerability. Integrity refers to the trustworthiness and veracity of
// information.
// This metric value increases with the consequence to the impacted component.
type IntegrityImpact int32

const (
	IntegrityImpact_INTEGRITY_IMPACT_INVALID   IntegrityImpact = 0
	IntegrityImpact_INTEGRITY_IMPACT_UNDEFINED IntegrityImpact = 1
	// There is a total loss of integrity, or a complete loss of protection.
	// For example, the attacker is able to modify any/all files protected
	// by the impacted component. Alternatively, only some files can be modified,
	// but malicious modification would present a direct, serious consequence
	// to the impacted component.
	IntegrityImpact_INTEGRITY_IMPACT_HIGH IntegrityImpact = 2
	// Modification of data is possible, but the attacker does not have control
	// over the consequence of a modification, or the amount of modification is
	// constrained. The data modification does not have a direct, serious impact
	// on the impacted component.
	IntegrityImpact_INTEGRITY_IMPACT_LOW IntegrityImpact = 3
	// There is no loss of integrity within the impacted component.
	IntegrityImpact_INTEGRITY_IMPACT_NONE IntegrityImpact = 4
)

// Enum value maps for IntegrityImpact.
var (
	IntegrityImpact_name = map[int32]string{
		0: "INTEGRITY_IMPACT_INVALID",
		1: "INTEGRITY_IMPACT_UNDEFINED",
		2: "INTEGRITY_IMPACT_HIGH",
		3: "INTEGRITY_IMPACT_LOW",
		4: "INTEGRITY_IMPACT_NONE",
	}
	IntegrityImpact_value = map[string]int32{
		"INTEGRITY_IMPACT_INVALID":   0,
		"INTEGRITY_IMPACT_UNDEFINED": 1,
		"INTEGRITY_IMPACT_HIGH":      2,
		"INTEGRITY_IMPACT_LOW":       3,
		"INTEGRITY_IMPACT_NONE":      4,
	}
)

func (x IntegrityImpact) Enum() *IntegrityImpact {
	p := new(IntegrityImpact)
	*p = x
	return p
}

func (x IntegrityImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrityImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[6].Descriptor()
}

func (IntegrityImpact) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[6]
}

func (x IntegrityImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrityImpact.Descriptor instead.
func (IntegrityImpact) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{6}
}

// This metric measures the impact to the availability of the impacted component
// resulting from a successfully exploited vulnerability. While the Confidentiality
// and Integrity impact metrics apply to the loss of confidentiality or integrity
// of data (e.g., information, files) used by the impacted component, this metric
// refers to the loss of availability of the impacted component itself, such as a
// networked service (e.g., web, database, email). Since availability refers to
// the accessibility of information resources, attacks that consume network
// bandwidth, processor cycles, or disk space all impact the availability of an
// impacted component.
// This metric value increases with the consequence to the impacted component.
type AvailabilityImpact int32

const (
	AvailabilityImpact_AVAILABILITY_IMPACT_INVALID   AvailabilityImpact = 0
	AvailabilityImpact_AVAILABILITY_IMPACT_UNDEFINED AvailabilityImpact = 1
	// There is total loss of availability, resulting in the attacker being able
	// to fully deny access to resources in the impacted component; this loss is
	// either sustained (while the attacker continues to deliver the attack) or
	// persistent (the condition persists even after the attack has completed).
	// Alternatively, the attacker has the ability to deny some availability,
	// but the loss of availability presents a direct, serious consequence to
	// the impacted component (e.g., the attacker cannot disrupt existing
	// connections, but can prevent new connections; the attacker can repeatedly
	// exploit a vulnerability that, in each instance of a successful attack,
	// leaks a only small amount of memory, but after repeated exploitation
	// causes a service to become completely unavailable).
	AvailabilityImpact_AVAILABILITY_IMPACT_HIGH AvailabilityImpact = 2
	// There is reduced performance or interruptions in resource availability.
	// Even if repeated exploitation of the vulnerability is possible, the attacker
	// does not have the ability to completely deny service to legitimate users.
	// The resources in the impacted component are either partially available all
	// of the time, or fully available only some of the time, but overall there is
	// no direct, serious consequence to the impacted component.
	AvailabilityImpact_AVAILABILITY_IMPACT_LOW AvailabilityImpact = 3
	// There is no impact to availability within the impacted component.
	AvailabilityImpact_AVAILABILITY_IMPACT_NONE AvailabilityImpact = 4
)

// Enum value maps for AvailabilityImpact.
var (
	AvailabilityImpact_name = map[int32]string{
		0: "AVAILABILITY_IMPACT_INVALID",
		1: "AVAILABILITY_IMPACT_UNDEFINED",
		2: "AVAILABILITY_IMPACT_HIGH",
		3: "AVAILABILITY_IMPACT_LOW",
		4: "AVAILABILITY_IMPACT_NONE",
	}
	AvailabilityImpact_value = map[string]int32{
		"AVAILABILITY_IMPACT_INVALID":   0,
		"AVAILABILITY_IMPACT_UNDEFINED": 1,
		"AVAILABILITY_IMPACT_HIGH":      2,
		"AVAILABILITY_IMPACT_LOW":       3,
		"AVAILABILITY_IMPACT_NONE":      4,
	}
)

func (x AvailabilityImpact) Enum() *AvailabilityImpact {
	p := new(AvailabilityImpact)
	*p = x
	return p
}

func (x AvailabilityImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[7].Descriptor()
}

func (AvailabilityImpact) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[7]
}

func (x AvailabilityImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityImpact.Descriptor instead.
func (AvailabilityImpact) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{7}
}

// Severity scale.
type Severity int32

const (
	Severity_SEVERITY_INVALID   Severity = 0
	Severity_SEVERITY_UNDEFINED Severity = 1
	// Low severity (0.0 - 3.9)
	Severity_SEVERITY_LOW Severity = 2
	// Medium severity (4.0 - 6.9)
	Severity_SEVERITY_MEDIUM Severity = 3
	// High severity (7.0 - 8.9)
	Severity_SEVERITY_HIGH Severity = 4
	// Criticial severity (9.0 - 10.0)
	Severity_SEVERITY_CRITICAL Severity = 5
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_INVALID",
		1: "SEVERITY_UNDEFINED",
		2: "SEVERITY_LOW",
		3: "SEVERITY_MEDIUM",
		4: "SEVERITY_HIGH",
		5: "SEVERITY_CRITICAL",
	}
	Severity_value = map[string]int32{
		"SEVERITY_INVALID":   0,
		"SEVERITY_UNDEFINED": 1,
		"SEVERITY_LOW":       2,
		"SEVERITY_MEDIUM":    3,
		"SEVERITY_HIGH":      4,
		"SEVERITY_CRITICAL":  5,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_mitre_cvss_v3_cvss_proto_enumTypes[8].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_mitre_cvss_v3_cvss_proto_enumTypes[8]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{8}
}

// BaseMetrics regroups base CVSS attributes.
type BaseMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackVector          AttackVector          `protobuf:"varint,1,opt,name=attack_vector,json=attackVector,proto3,enum=mitre.cvss.v3.AttackVector" json:"attack_vector,omitempty"`
	AttackComplexity      AttackComplexity      `protobuf:"varint,2,opt,name=attack_complexity,json=attackComplexity,proto3,enum=mitre.cvss.v3.AttackComplexity" json:"attack_complexity,omitempty"`
	PrivilegeRequired     PrivilegeRequired     `protobuf:"varint,3,opt,name=privilege_required,json=privilegeRequired,proto3,enum=mitre.cvss.v3.PrivilegeRequired" json:"privilege_required,omitempty"`
	UserInteraction       UserInteraction       `protobuf:"varint,4,opt,name=user_interaction,json=userInteraction,proto3,enum=mitre.cvss.v3.UserInteraction" json:"user_interaction,omitempty"`
	Scope                 Scope                 `protobuf:"varint,5,opt,name=scope,proto3,enum=mitre.cvss.v3.Scope" json:"scope,omitempty"`
	ConfidentialityImpact ConfidentialityImpact `protobuf:"varint,6,opt,name=confidentiality_impact,json=confidentialityImpact,proto3,enum=mitre.cvss.v3.ConfidentialityImpact" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       IntegrityImpact       `protobuf:"varint,7,opt,name=integrity_impact,json=integrityImpact,proto3,enum=mitre.cvss.v3.IntegrityImpact" json:"integrity_impact,omitempty"`
	AvailabilityImpact    AvailabilityImpact    `protobuf:"varint,8,opt,name=availability_impact,json=availabilityImpact,proto3,enum=mitre.cvss.v3.AvailabilityImpact" json:"availability_impact,omitempty"`
}

func (x *BaseMetrics) Reset() {
	*x = BaseMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMetrics) ProtoMessage() {}

func (x *BaseMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMetrics.ProtoReflect.Descriptor instead.
func (*BaseMetrics) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{0}
}

func (x *BaseMetrics) GetAttackVector() AttackVector {
	if x != nil {
		return x.AttackVector
	}
	return AttackVector_ATTACK_VECTOR_INVALID
}

func (x *BaseMetrics) GetAttackComplexity() AttackComplexity {
	if x != nil {
		return x.AttackComplexity
	}
	return AttackComplexity_ATTACK_COMPLEXITY_INVALID
}

func (x *BaseMetrics) GetPrivilegeRequired() PrivilegeRequired {
	if x != nil {
		return x.PrivilegeRequired
	}
	return PrivilegeRequired_PRIVILEGE_REQUIRED_INVALID
}

func (x *BaseMetrics) GetUserInteraction() UserInteraction {
	if x != nil {
		return x.UserInteraction
	}
	return UserInteraction_USER_INTERACTION_INVALID
}

func (x *BaseMetrics) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_INVALID
}

func (x *BaseMetrics) GetConfidentialityImpact() ConfidentialityImpact {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return ConfidentialityImpact_CONFIDENTIALITY_IMPACT_INVALID
}

func (x *BaseMetrics) GetIntegrityImpact() IntegrityImpact {
	if x != nil {
		return x.IntegrityImpact
	}
	return IntegrityImpact_INTEGRITY_IMPACT_INVALID
}

func (x *BaseMetrics) GetAvailabilityImpact() AvailabilityImpact {
	if x != nil {
		return x.AvailabilityImpact
	}
	return AvailabilityImpact_AVAILABILITY_IMPACT_INVALID
}

// Vector defines CVSS object attributes.
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseMetrics *BaseMetrics `protobuf:"bytes,1,opt,name=base_metrics,json=baseMetrics,proto3" json:"base_metrics,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{1}
}

func (x *Vector) GetBaseMetrics() *BaseMetrics {
	if x != nil {
		return x.BaseMetrics
	}
	return nil
}

// Score defines all CVSS intermediate and final calculus.
type Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore *BaseScore `protobuf:"bytes,1,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
}

func (x *Score) Reset() {
	*x = Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{2}
}

func (x *Score) GetBaseScore() *BaseScore {
	if x != nil {
		return x.BaseScore
	}
	return nil
}

// BaseScore regroups all calculus attributes for Base Metrics.
type BaseScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackVector          float64 `protobuf:"fixed64,1,opt,name=attack_vector,json=attackVector,proto3" json:"attack_vector,omitempty"`
	AttackComplexity      float64 `protobuf:"fixed64,2,opt,name=attack_complexity,json=attackComplexity,proto3" json:"attack_complexity,omitempty"`
	PrivilegeRequired     float64 `protobuf:"fixed64,3,opt,name=privilege_required,json=privilegeRequired,proto3" json:"privilege_required,omitempty"`
	UserInteraction       float64 `protobuf:"fixed64,4,opt,name=user_interaction,json=userInteraction,proto3" json:"user_interaction,omitempty"`
	ConfidentialityImpact float64 `protobuf:"fixed64,5,opt,name=confidentiality_impact,json=confidentialityImpact,proto3" json:"confidentiality_impact,omitempty"`
	IntegrityImpact       float64 `protobuf:"fixed64,6,opt,name=integrity_impact,json=integrityImpact,proto3" json:"integrity_impact,omitempty"`
	AvailabilityImpact    float64 `protobuf:"fixed64,7,opt,name=availability_impact,json=availabilityImpact,proto3" json:"availability_impact,omitempty"`
	Impact                float64 `protobuf:"fixed64,8,opt,name=impact,proto3" json:"impact,omitempty"`
	Exploitability        float64 `protobuf:"fixed64,9,opt,name=exploitability,proto3" json:"exploitability,omitempty"`
	Score                 float64 `protobuf:"fixed64,10,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *BaseScore) Reset() {
	*x = BaseScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseScore) ProtoMessage() {}

func (x *BaseScore) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_cvss_v3_cvss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseScore.ProtoReflect.Descriptor instead.
func (*BaseScore) Descriptor() ([]byte, []int) {
	return file_mitre_cvss_v3_cvss_proto_rawDescGZIP(), []int{3}
}

func (x *BaseScore) GetAttackVector() float64 {
	if x != nil {
		return x.AttackVector
	}
	return 0
}

func (x *BaseScore) GetAttackComplexity() float64 {
	if x != nil {
		return x.AttackComplexity
	}
	return 0
}

func (x *BaseScore) GetPrivilegeRequired() float64 {
	if x != nil {
		return x.PrivilegeRequired
	}
	return 0
}

func (x *BaseScore) GetUserInteraction() float64 {
	if x != nil {
		return x.UserInteraction
	}
	return 0
}

func (x *BaseScore) GetConfidentialityImpact() float64 {
	if x != nil {
		return x.ConfidentialityImpact
	}
	return 0
}

func (x *BaseScore) GetIntegrityImpact() float64 {
	if x != nil {
		return x.IntegrityImpact
	}
	return 0
}

func (x *BaseScore) GetAvailabilityImpact() float64 {
	if x != nil {
		return x.AvailabilityImpact
	}
	return 0
}

func (x *BaseScore) GetImpact() float64 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *BaseScore) GetExploitability() float64 {
	if x != nil {
		return x.Exploitability
	}
	return 0
}

func (x *BaseScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_mitre_cvss_v3_cvss_proto protoreflect.FileDescriptor

var file_mitre_cvss_v3_cvss_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x63, 0x76, 0x73, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x63, 0x76, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x33, 0x22, 0xe1, 0x04, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63,
	0x76, 0x73, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76,
	0x73, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x49,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63,
	0x76, 0x73, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x22, 0x47, 0x0a,
	0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x40, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2a, 0xb2, 0x01, 0x0a, 0x0c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x41, 0x44, 0x4a, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05,
	0x2a, 0x89, 0x01, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x58, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x2a, 0xab, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x2a, 0x89, 0x01, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0xc3, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x9f, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0xb1, 0x01, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x89, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x42, 0xa6, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x63, 0x76, 0x73, 0x73, 0x2e, 0x76, 0x33, 0x42, 0x09, 0x43,
	0x76, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x63, 0x76,
	0x73, 0x73, 0x2f, 0x76, 0x33, 0x3b, 0x63, 0x76, 0x73, 0x73, 0x76, 0x33, 0xa2, 0x02, 0x03, 0x4d,
	0x43, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x2e,
	0x56, 0x33, 0xca, 0x02, 0x0d, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x5c, 0x43, 0x76, 0x73, 0x73, 0x5c,
	0x56, 0x33, 0xe2, 0x02, 0x19, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x5c, 0x43, 0x76, 0x73, 0x73, 0x5c,
	0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0f, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x3a, 0x3a, 0x43, 0x76, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x33,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mitre_cvss_v3_cvss_proto_rawDescOnce sync.Once
	file_mitre_cvss_v3_cvss_proto_rawDescData = file_mitre_cvss_v3_cvss_proto_rawDesc
)

func file_mitre_cvss_v3_cvss_proto_rawDescGZIP() []byte {
	file_mitre_cvss_v3_cvss_proto_rawDescOnce.Do(func() {
		file_mitre_cvss_v3_cvss_proto_rawDescData = protoimpl.X.CompressGZIP(file_mitre_cvss_v3_cvss_proto_rawDescData)
	})
	return file_mitre_cvss_v3_cvss_proto_rawDescData
}

var file_mitre_cvss_v3_cvss_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_mitre_cvss_v3_cvss_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mitre_cvss_v3_cvss_proto_goTypes = []interface{}{
	(AttackVector)(0),          // 0: mitre.cvss.v3.AttackVector
	(AttackComplexity)(0),      // 1: mitre.cvss.v3.AttackComplexity
	(PrivilegeRequired)(0),     // 2: mitre.cvss.v3.PrivilegeRequired
	(UserInteraction)(0),       // 3: mitre.cvss.v3.UserInteraction
	(Scope)(0),                 // 4: mitre.cvss.v3.Scope
	(ConfidentialityImpact)(0), // 5: mitre.cvss.v3.ConfidentialityImpact
	(IntegrityImpact)(0),       // 6: mitre.cvss.v3.IntegrityImpact
	(AvailabilityImpact)(0),    // 7: mitre.cvss.v3.AvailabilityImpact
	(Severity)(0),              // 8: mitre.cvss.v3.Severity
	(*BaseMetrics)(nil),        // 9: mitre.cvss.v3.BaseMetrics
	(*Vector)(nil),             // 10: mitre.cvss.v3.Vector
	(*Score)(nil),              // 11: mitre.cvss.v3.Score
	(*BaseScore)(nil),          // 12: mitre.cvss.v3.BaseScore
}
var file_mitre_cvss_v3_cvss_proto_depIdxs = []int32{
	0,  // 0: mitre.cvss.v3.BaseMetrics.attack_vector:type_name -> mitre.cvss.v3.AttackVector
	1,  // 1: mitre.cvss.v3.BaseMetrics.attack_complexity:type_name -> mitre.cvss.v3.AttackComplexity
	2,  // 2: mitre.cvss.v3.BaseMetrics.privilege_required:type_name -> mitre.cvss.v3.PrivilegeRequired
	3,  // 3: mitre.cvss.v3.BaseMetrics.user_interaction:type_name -> mitre.cvss.v3.UserInteraction
	4,  // 4: mitre.cvss.v3.BaseMetrics.scope:type_name -> mitre.cvss.v3.Scope
	5,  // 5: mitre.cvss.v3.BaseMetrics.confidentiality_impact:type_name -> mitre.cvss.v3.ConfidentialityImpact
	6,  // 6: mitre.cvss.v3.BaseMetrics.integrity_impact:type_name -> mitre.cvss.v3.IntegrityImpact
	7,  // 7: mitre.cvss.v3.BaseMetrics.availability_impact:type_name -> mitre.cvss.v3.AvailabilityImpact
	9,  // 8: mitre.cvss.v3.Vector.base_metrics:type_name -> mitre.cvss.v3.BaseMetrics
	12, // 9: mitre.cvss.v3.Score.base_score:type_name -> mitre.cvss.v3.BaseScore
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_mitre_cvss_v3_cvss_proto_init() }
func file_mitre_cvss_v3_cvss_proto_init() {
	if File_mitre_cvss_v3_cvss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mitre_cvss_v3_cvss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v3_cvss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v3_cvss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_cvss_v3_cvss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mitre_cvss_v3_cvss_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mitre_cvss_v3_cvss_proto_goTypes,
		DependencyIndexes: file_mitre_cvss_v3_cvss_proto_depIdxs,
		EnumInfos:         file_mitre_cvss_v3_cvss_proto_enumTypes,
		MessageInfos:      file_mitre_cvss_v3_cvss_proto_msgTypes,
	}.Build()
	File_mitre_cvss_v3_cvss_proto = out.File
	file_mitre_cvss_v3_cvss_proto_rawDesc = nil
	file_mitre_cvss_v3_cvss_proto_goTypes = nil
	file_mitre_cvss_v3_cvss_proto_depIdxs = nil
}
