// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: mitre/stix/v2/observable.proto

package stixv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Artifact Object permits capturing an array of bytes (8-bits), as a base64-encoded
// string, or linking to a file-like payload.
type ArtifactObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions []string          `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	MimeType   string            `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	PayloadBin []byte            `protobuf:"bytes,4,opt,name=payload_bin,json=payloadBin,proto3" json:"payload_bin,omitempty"`
	Url        string            `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Hashes     map[string]string `protobuf:"bytes,6,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArtifactObject) Reset() {
	*x = ArtifactObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactObject) ProtoMessage() {}

func (x *ArtifactObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactObject.ProtoReflect.Descriptor instead.
func (*ArtifactObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArtifactObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *ArtifactObject) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ArtifactObject) GetPayloadBin() []byte {
	if x != nil {
		return x.PayloadBin
	}
	return nil
}

func (x *ArtifactObject) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ArtifactObject) GetHashes() map[string]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// The AS object represents the properties of an Autonomous System (AS).
type AutonomousSystemObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Number     int64    `protobuf:"zigzag64,3,opt,name=number,proto3" json:"number,omitempty"`
	Name       string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Rir        string   `protobuf:"bytes,5,opt,name=rir,proto3" json:"rir,omitempty"`
}

func (x *AutonomousSystemObject) Reset() {
	*x = AutonomousSystemObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutonomousSystemObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutonomousSystemObject) ProtoMessage() {}

func (x *AutonomousSystemObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutonomousSystemObject.ProtoReflect.Descriptor instead.
func (*AutonomousSystemObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{1}
}

func (x *AutonomousSystemObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutonomousSystemObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *AutonomousSystemObject) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AutonomousSystemObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutonomousSystemObject) GetRir() string {
	if x != nil {
		return x.Rir
	}
	return ""
}

// The Directory Object represents the properties common to a file system directory.
type DirectoryObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions   []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Path         string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	PathEnc      string   `protobuf:"bytes,4,opt,name=path_enc,json=pathEnc,proto3" json:"path_enc,omitempty"`
	Created      string   `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Modified     string   `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty"`
	Accessed     string   `protobuf:"bytes,7,opt,name=accessed,proto3" json:"accessed,omitempty"`
	ContainsRefs []string `protobuf:"bytes,8,rep,name=contains_refs,json=containsRefs,proto3" json:"contains_refs,omitempty"`
}

func (x *DirectoryObject) Reset() {
	*x = DirectoryObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryObject) ProtoMessage() {}

func (x *DirectoryObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryObject.ProtoReflect.Descriptor instead.
func (*DirectoryObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{2}
}

func (x *DirectoryObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DirectoryObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *DirectoryObject) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DirectoryObject) GetPathEnc() string {
	if x != nil {
		return x.PathEnc
	}
	return ""
}

func (x *DirectoryObject) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *DirectoryObject) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *DirectoryObject) GetAccessed() string {
	if x != nil {
		return x.Accessed
	}
	return ""
}

func (x *DirectoryObject) GetContainsRefs() []string {
	if x != nil {
		return x.ContainsRefs
	}
	return nil
}

// The Domain Name represents the properties of a network domain name.
type DomainNameObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions     []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Value          string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ResolvesToRefs []string `protobuf:"bytes,4,rep,name=resolves_to_refs,json=resolvesToRefs,proto3" json:"resolves_to_refs,omitempty"`
}

func (x *DomainNameObject) Reset() {
	*x = DomainNameObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainNameObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainNameObject) ProtoMessage() {}

func (x *DomainNameObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainNameObject.ProtoReflect.Descriptor instead.
func (*DomainNameObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{3}
}

func (x *DomainNameObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DomainNameObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *DomainNameObject) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DomainNameObject) GetResolvesToRefs() []string {
	if x != nil {
		return x.ResolvesToRefs
	}
	return nil
}

// The Email Address Object represents a single email address.
type EmailAddressObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions   []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Value        string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	DisplayName  string   `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	BelongsToRef string   `protobuf:"bytes,5,opt,name=belongs_to_ref,json=belongsToRef,proto3" json:"belongs_to_ref,omitempty"`
}

func (x *EmailAddressObject) Reset() {
	*x = EmailAddressObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAddressObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAddressObject) ProtoMessage() {}

func (x *EmailAddressObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAddressObject.ProtoReflect.Descriptor instead.
func (*EmailAddressObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{4}
}

func (x *EmailAddressObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EmailAddressObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *EmailAddressObject) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EmailAddressObject) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EmailAddressObject) GetBelongsToRef() string {
	if x != nil {
		return x.BelongsToRef
	}
	return ""
}

// The Email Message Object represents an instance of an email message,
// corresponding to the internet message format described in [RFC5322]
// and related RFCs.
type EmailMessageObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    string                    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions              []string                  `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	IsMultipart             bool                      `protobuf:"varint,3,opt,name=is_multipart,json=isMultipart,proto3" json:"is_multipart,omitempty"`
	Date                    string                    `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	ContentType             string                    `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	FromRef                 string                    `protobuf:"bytes,6,opt,name=from_ref,json=fromRef,proto3" json:"from_ref,omitempty"`
	SenderRef               string                    `protobuf:"bytes,7,opt,name=sender_ref,json=senderRef,proto3" json:"sender_ref,omitempty"`
	ToRefs                  []string                  `protobuf:"bytes,8,rep,name=to_refs,json=toRefs,proto3" json:"to_refs,omitempty"`
	CcRefs                  []string                  `protobuf:"bytes,9,rep,name=cc_refs,json=ccRefs,proto3" json:"cc_refs,omitempty"`
	BccRefs                 []string                  `protobuf:"bytes,10,rep,name=bcc_refs,json=bccRefs,proto3" json:"bcc_refs,omitempty"`
	Subject                 string                    `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	ReceivedLines           []string                  `protobuf:"bytes,12,rep,name=received_lines,json=receivedLines,proto3" json:"received_lines,omitempty"`
	AdditionalHeadersFields []*EmailHeaderComponent   `protobuf:"bytes,13,rep,name=additional_headers_fields,json=additionalHeadersFields,proto3" json:"additional_headers_fields,omitempty"`
	Body                    string                    `protobuf:"bytes,14,opt,name=body,proto3" json:"body,omitempty"`
	BodyMultipart           []*EmailMIMEPartComponent `protobuf:"bytes,15,rep,name=body_multipart,json=bodyMultipart,proto3" json:"body_multipart,omitempty"`
	RawEmailRef             string                    `protobuf:"bytes,16,opt,name=raw_email_ref,json=rawEmailRef,proto3" json:"raw_email_ref,omitempty"`
}

func (x *EmailMessageObject) Reset() {
	*x = EmailMessageObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailMessageObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailMessageObject) ProtoMessage() {}

func (x *EmailMessageObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailMessageObject.ProtoReflect.Descriptor instead.
func (*EmailMessageObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{5}
}

func (x *EmailMessageObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EmailMessageObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *EmailMessageObject) GetIsMultipart() bool {
	if x != nil {
		return x.IsMultipart
	}
	return false
}

func (x *EmailMessageObject) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EmailMessageObject) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmailMessageObject) GetFromRef() string {
	if x != nil {
		return x.FromRef
	}
	return ""
}

func (x *EmailMessageObject) GetSenderRef() string {
	if x != nil {
		return x.SenderRef
	}
	return ""
}

func (x *EmailMessageObject) GetToRefs() []string {
	if x != nil {
		return x.ToRefs
	}
	return nil
}

func (x *EmailMessageObject) GetCcRefs() []string {
	if x != nil {
		return x.CcRefs
	}
	return nil
}

func (x *EmailMessageObject) GetBccRefs() []string {
	if x != nil {
		return x.BccRefs
	}
	return nil
}

func (x *EmailMessageObject) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailMessageObject) GetReceivedLines() []string {
	if x != nil {
		return x.ReceivedLines
	}
	return nil
}

func (x *EmailMessageObject) GetAdditionalHeadersFields() []*EmailHeaderComponent {
	if x != nil {
		return x.AdditionalHeadersFields
	}
	return nil
}

func (x *EmailMessageObject) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *EmailMessageObject) GetBodyMultipart() []*EmailMIMEPartComponent {
	if x != nil {
		return x.BodyMultipart
	}
	return nil
}

func (x *EmailMessageObject) GetRawEmailRef() string {
	if x != nil {
		return x.RawEmailRef
	}
	return ""
}

// EmailHeaderComponent defines additional headers component for Email Object.
type EmailHeaderComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Items []string `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EmailHeaderComponent) Reset() {
	*x = EmailHeaderComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailHeaderComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailHeaderComponent) ProtoMessage() {}

func (x *EmailHeaderComponent) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailHeaderComponent.ProtoReflect.Descriptor instead.
func (*EmailHeaderComponent) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{6}
}

func (x *EmailHeaderComponent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EmailHeaderComponent) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

// Specifies one component of a multi-part email body.
type EmailMIMEPartComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body               string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	BodyRawRef         string `protobuf:"bytes,2,opt,name=body_raw_ref,json=bodyRawRef,proto3" json:"body_raw_ref,omitempty"`
	ContentType        string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentDisposition string `protobuf:"bytes,4,opt,name=content_disposition,json=contentDisposition,proto3" json:"content_disposition,omitempty"`
}

func (x *EmailMIMEPartComponent) Reset() {
	*x = EmailMIMEPartComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailMIMEPartComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailMIMEPartComponent) ProtoMessage() {}

func (x *EmailMIMEPartComponent) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailMIMEPartComponent.ProtoReflect.Descriptor instead.
func (*EmailMIMEPartComponent) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{7}
}

func (x *EmailMIMEPartComponent) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *EmailMIMEPartComponent) GetBodyRawRef() string {
	if x != nil {
		return x.BodyRawRef
	}
	return ""
}

func (x *EmailMIMEPartComponent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmailMIMEPartComponent) GetContentDisposition() string {
	if x != nil {
		return x.ContentDisposition
	}
	return ""
}

// The File Object represents the properties of a file.
type FileObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions          []string          `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Hashes              map[string]string `protobuf:"bytes,3,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Size                int64             `protobuf:"zigzag64,4,opt,name=size,proto3" json:"size,omitempty"`
	Name                string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NameEnc             string            `protobuf:"bytes,6,opt,name=name_enc,json=nameEnc,proto3" json:"name_enc,omitempty"`
	MagicNumberHex      string            `protobuf:"bytes,7,opt,name=magic_number_hex,json=magicNumberHex,proto3" json:"magic_number_hex,omitempty"`
	MimeType            string            `protobuf:"bytes,8,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Created             string            `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	Modified            string            `protobuf:"bytes,10,opt,name=modified,proto3" json:"modified,omitempty"`
	Accessed            string            `protobuf:"bytes,11,opt,name=accessed,proto3" json:"accessed,omitempty"`
	ParentDirectoryRef  string            `protobuf:"bytes,12,opt,name=parent_directory_ref,json=parentDirectoryRef,proto3" json:"parent_directory_ref,omitempty"`
	IsEncrypted         bool              `protobuf:"varint,13,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	EncryptionAlgorithm string            `protobuf:"bytes,14,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3" json:"encryption_algorithm,omitempty"`
	DecryptionKey       string            `protobuf:"bytes,15,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
	ContainsRefs        []string          `protobuf:"bytes,16,rep,name=contains_refs,json=containsRefs,proto3" json:"contains_refs,omitempty"`
	ContentRef          string            `protobuf:"bytes,17,opt,name=content_ref,json=contentRef,proto3" json:"content_ref,omitempty"`
}

func (x *FileObject) Reset() {
	*x = FileObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileObject) ProtoMessage() {}

func (x *FileObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileObject.ProtoReflect.Descriptor instead.
func (*FileObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{8}
}

func (x *FileObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *FileObject) GetHashes() map[string]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *FileObject) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileObject) GetNameEnc() string {
	if x != nil {
		return x.NameEnc
	}
	return ""
}

func (x *FileObject) GetMagicNumberHex() string {
	if x != nil {
		return x.MagicNumberHex
	}
	return ""
}

func (x *FileObject) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileObject) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *FileObject) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *FileObject) GetAccessed() string {
	if x != nil {
		return x.Accessed
	}
	return ""
}

func (x *FileObject) GetParentDirectoryRef() string {
	if x != nil {
		return x.ParentDirectoryRef
	}
	return ""
}

func (x *FileObject) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *FileObject) GetEncryptionAlgorithm() string {
	if x != nil {
		return x.EncryptionAlgorithm
	}
	return ""
}

func (x *FileObject) GetDecryptionKey() string {
	if x != nil {
		return x.DecryptionKey
	}
	return ""
}

func (x *FileObject) GetContainsRefs() []string {
	if x != nil {
		return x.ContainsRefs
	}
	return nil
}

func (x *FileObject) GetContentRef() string {
	if x != nil {
		return x.ContentRef
	}
	return ""
}

// The IPv4 Address Object represents one or more IPv4
// addresses expressed using CIDR notation.
type IPv4AddressObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions     []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Value          string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ResolvesToRefs []string `protobuf:"bytes,4,rep,name=resolves_to_refs,json=resolvesToRefs,proto3" json:"resolves_to_refs,omitempty"`
	BelongsToRefs  []string `protobuf:"bytes,5,rep,name=belongs_to_refs,json=belongsToRefs,proto3" json:"belongs_to_refs,omitempty"`
}

func (x *IPv4AddressObject) Reset() {
	*x = IPv4AddressObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4AddressObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4AddressObject) ProtoMessage() {}

func (x *IPv4AddressObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4AddressObject.ProtoReflect.Descriptor instead.
func (*IPv4AddressObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{9}
}

func (x *IPv4AddressObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IPv4AddressObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *IPv4AddressObject) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IPv4AddressObject) GetResolvesToRefs() []string {
	if x != nil {
		return x.ResolvesToRefs
	}
	return nil
}

func (x *IPv4AddressObject) GetBelongsToRefs() []string {
	if x != nil {
		return x.BelongsToRefs
	}
	return nil
}

// The IPv6 Address Object represents one or more IPv6
// addresses expressed using CIDR notation.
type IPv6AddressObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions     []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Value          string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ResolvesToRefs []string `protobuf:"bytes,4,rep,name=resolves_to_refs,json=resolvesToRefs,proto3" json:"resolves_to_refs,omitempty"`
	BelongsToRefs  []string `protobuf:"bytes,5,rep,name=belongs_to_refs,json=belongsToRefs,proto3" json:"belongs_to_refs,omitempty"`
}

func (x *IPv6AddressObject) Reset() {
	*x = IPv6AddressObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv6AddressObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6AddressObject) ProtoMessage() {}

func (x *IPv6AddressObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6AddressObject.ProtoReflect.Descriptor instead.
func (*IPv6AddressObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{10}
}

func (x *IPv6AddressObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IPv6AddressObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *IPv6AddressObject) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IPv6AddressObject) GetResolvesToRefs() []string {
	if x != nil {
		return x.ResolvesToRefs
	}
	return nil
}

func (x *IPv6AddressObject) GetBelongsToRefs() []string {
	if x != nil {
		return x.BelongsToRefs
	}
	return nil
}

// The MAC Address Object represents a single Media Access
// Control (MAC) address.
type MacAddressObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Value      string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MacAddressObject) Reset() {
	*x = MacAddressObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddressObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddressObject) ProtoMessage() {}

func (x *MacAddressObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddressObject.ProtoReflect.Descriptor instead.
func (*MacAddressObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{11}
}

func (x *MacAddressObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MacAddressObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *MacAddressObject) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The Mutex Object represents the properties of a mutual
// exclusion (mutex) object.
type MutexObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MutexObject) Reset() {
	*x = MutexObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutexObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutexObject) ProtoMessage() {}

func (x *MutexObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutexObject.ProtoReflect.Descriptor instead.
func (*MutexObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{12}
}

func (x *MutexObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MutexObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *MutexObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The Network Traffic Object represents arbitrary network
// traffic that originates from a source and is addressed
// to a destination.
type NetworkTrafficObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions        []string          `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Start             string            `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End               string            `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	IsActive          bool              `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	SrcRef            string            `protobuf:"bytes,6,opt,name=src_ref,json=srcRef,proto3" json:"src_ref,omitempty"`
	DstRef            string            `protobuf:"bytes,7,opt,name=dst_ref,json=dstRef,proto3" json:"dst_ref,omitempty"`
	SrcPort           int32             `protobuf:"zigzag32,8,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort           int32             `protobuf:"zigzag32,9,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Protocols         []string          `protobuf:"bytes,10,rep,name=protocols,proto3" json:"protocols,omitempty"`
	SrcByteCount      int64             `protobuf:"zigzag64,11,opt,name=src_byte_count,json=srcByteCount,proto3" json:"src_byte_count,omitempty"`
	DstByteCount      int64             `protobuf:"zigzag64,12,opt,name=dst_byte_count,json=dstByteCount,proto3" json:"dst_byte_count,omitempty"`
	SrcPackets        int64             `protobuf:"zigzag64,13,opt,name=src_packets,json=srcPackets,proto3" json:"src_packets,omitempty"`
	DstPackets        int64             `protobuf:"zigzag64,14,opt,name=dst_packets,json=dstPackets,proto3" json:"dst_packets,omitempty"`
	Ipfix             map[string]string `protobuf:"bytes,15,rep,name=ipfix,proto3" json:"ipfix,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SrcPayloadRef     string            `protobuf:"bytes,16,opt,name=src_payload_ref,json=srcPayloadRef,proto3" json:"src_payload_ref,omitempty"`
	DstPayloadRef     string            `protobuf:"bytes,17,opt,name=dst_payload_ref,json=dstPayloadRef,proto3" json:"dst_payload_ref,omitempty"`
	EncapsulatesRefs  []string          `protobuf:"bytes,18,rep,name=encapsulates_refs,json=encapsulatesRefs,proto3" json:"encapsulates_refs,omitempty"`
	EncapsulatedByRef string            `protobuf:"bytes,19,opt,name=encapsulated_by_ref,json=encapsulatedByRef,proto3" json:"encapsulated_by_ref,omitempty"`
}

func (x *NetworkTrafficObject) Reset() {
	*x = NetworkTrafficObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkTrafficObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTrafficObject) ProtoMessage() {}

func (x *NetworkTrafficObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTrafficObject.ProtoReflect.Descriptor instead.
func (*NetworkTrafficObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkTrafficObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkTrafficObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *NetworkTrafficObject) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *NetworkTrafficObject) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *NetworkTrafficObject) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *NetworkTrafficObject) GetSrcRef() string {
	if x != nil {
		return x.SrcRef
	}
	return ""
}

func (x *NetworkTrafficObject) GetDstRef() string {
	if x != nil {
		return x.DstRef
	}
	return ""
}

func (x *NetworkTrafficObject) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *NetworkTrafficObject) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *NetworkTrafficObject) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *NetworkTrafficObject) GetSrcByteCount() int64 {
	if x != nil {
		return x.SrcByteCount
	}
	return 0
}

func (x *NetworkTrafficObject) GetDstByteCount() int64 {
	if x != nil {
		return x.DstByteCount
	}
	return 0
}

func (x *NetworkTrafficObject) GetSrcPackets() int64 {
	if x != nil {
		return x.SrcPackets
	}
	return 0
}

func (x *NetworkTrafficObject) GetDstPackets() int64 {
	if x != nil {
		return x.DstPackets
	}
	return 0
}

func (x *NetworkTrafficObject) GetIpfix() map[string]string {
	if x != nil {
		return x.Ipfix
	}
	return nil
}

func (x *NetworkTrafficObject) GetSrcPayloadRef() string {
	if x != nil {
		return x.SrcPayloadRef
	}
	return ""
}

func (x *NetworkTrafficObject) GetDstPayloadRef() string {
	if x != nil {
		return x.DstPayloadRef
	}
	return ""
}

func (x *NetworkTrafficObject) GetEncapsulatesRefs() []string {
	if x != nil {
		return x.EncapsulatesRefs
	}
	return nil
}

func (x *NetworkTrafficObject) GetEncapsulatedByRef() string {
	if x != nil {
		return x.EncapsulatedByRef
	}
	return ""
}

// The Process Object represents common properties of an instance
// of a computer program as executed on an operating system.
type ProcessObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions           []string          `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	IsHidden             bool              `protobuf:"varint,3,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Pid                  int64             `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Name                 string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Created              string            `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Cwd                  string            `protobuf:"bytes,7,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Arguments            []string          `protobuf:"bytes,8,rep,name=arguments,proto3" json:"arguments,omitempty"`
	CommandLine          string            `protobuf:"bytes,9,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	EnvironmentVariables map[string]string `protobuf:"bytes,10,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OpenedConnectionRefs []string          `protobuf:"bytes,11,rep,name=opened_connection_refs,json=openedConnectionRefs,proto3" json:"opened_connection_refs,omitempty"`
	CreatorUserRef       string            `protobuf:"bytes,12,opt,name=creator_user_ref,json=creatorUserRef,proto3" json:"creator_user_ref,omitempty"`
	BinaryRef            string            `protobuf:"bytes,13,opt,name=binary_ref,json=binaryRef,proto3" json:"binary_ref,omitempty"`
	ParentRef            string            `protobuf:"bytes,14,opt,name=parent_ref,json=parentRef,proto3" json:"parent_ref,omitempty"`
	ChildRefs            []string          `protobuf:"bytes,15,rep,name=child_refs,json=childRefs,proto3" json:"child_refs,omitempty"`
}

func (x *ProcessObject) Reset() {
	*x = ProcessObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessObject) ProtoMessage() {}

func (x *ProcessObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessObject.ProtoReflect.Descriptor instead.
func (*ProcessObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{14}
}

func (x *ProcessObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProcessObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *ProcessObject) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *ProcessObject) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessObject) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ProcessObject) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *ProcessObject) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ProcessObject) GetCommandLine() string {
	if x != nil {
		return x.CommandLine
	}
	return ""
}

func (x *ProcessObject) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *ProcessObject) GetOpenedConnectionRefs() []string {
	if x != nil {
		return x.OpenedConnectionRefs
	}
	return nil
}

func (x *ProcessObject) GetCreatorUserRef() string {
	if x != nil {
		return x.CreatorUserRef
	}
	return ""
}

func (x *ProcessObject) GetBinaryRef() string {
	if x != nil {
		return x.BinaryRef
	}
	return ""
}

func (x *ProcessObject) GetParentRef() string {
	if x != nil {
		return x.ParentRef
	}
	return ""
}

func (x *ProcessObject) GetChildRefs() []string {
	if x != nil {
		return x.ChildRefs
	}
	return nil
}

// The Software Object represents high-level properties
// associated with software, including software products.
type SoftwareObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Cpe        string   `protobuf:"bytes,4,opt,name=cpe,proto3" json:"cpe,omitempty"`
	Languages  []string `protobuf:"bytes,5,rep,name=languages,proto3" json:"languages,omitempty"`
	Vendor     string   `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Version    string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SoftwareObject) Reset() {
	*x = SoftwareObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareObject) ProtoMessage() {}

func (x *SoftwareObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareObject.ProtoReflect.Descriptor instead.
func (*SoftwareObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{15}
}

func (x *SoftwareObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SoftwareObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *SoftwareObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SoftwareObject) GetCpe() string {
	if x != nil {
		return x.Cpe
	}
	return ""
}

func (x *SoftwareObject) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *SoftwareObject) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *SoftwareObject) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// The URL Object represents the properties of a uniform
// resource locator (URL).
type URLObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Value      string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *URLObject) Reset() {
	*x = URLObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLObject) ProtoMessage() {}

func (x *URLObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLObject.ProtoReflect.Descriptor instead.
func (*URLObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{16}
}

func (x *URLObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *URLObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *URLObject) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The User Account Object represents an instance of any
// type of user account, including but not limited to operating
// system, device, messaging service, and social media platform
// accounts.
type UserAccountObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions          []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	UserId              string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountLogin        string   `protobuf:"bytes,4,opt,name=account_login,json=accountLogin,proto3" json:"account_login,omitempty"`
	AccountType         string   `protobuf:"bytes,5,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	DisplayName         string   `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	IsServiceAccount    bool     `protobuf:"varint,7,opt,name=is_service_account,json=isServiceAccount,proto3" json:"is_service_account,omitempty"`
	IsPrivileged        bool     `protobuf:"varint,8,opt,name=is_privileged,json=isPrivileged,proto3" json:"is_privileged,omitempty"`
	CanEscalatePrivs    bool     `protobuf:"varint,9,opt,name=can_escalate_privs,json=canEscalatePrivs,proto3" json:"can_escalate_privs,omitempty"`
	IsDisabled          bool     `protobuf:"varint,10,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	AccountCreated      string   `protobuf:"bytes,11,opt,name=account_created,json=accountCreated,proto3" json:"account_created,omitempty"`
	AccountExpires      string   `protobuf:"bytes,12,opt,name=account_expires,json=accountExpires,proto3" json:"account_expires,omitempty"`
	PasswordLastChanged string   `protobuf:"bytes,13,opt,name=password_last_changed,json=passwordLastChanged,proto3" json:"password_last_changed,omitempty"`
	AccountFirstLogin   string   `protobuf:"bytes,14,opt,name=account_first_login,json=accountFirstLogin,proto3" json:"account_first_login,omitempty"`
	AccountLastLogin    string   `protobuf:"bytes,15,opt,name=account_last_login,json=accountLastLogin,proto3" json:"account_last_login,omitempty"`
}

func (x *UserAccountObject) Reset() {
	*x = UserAccountObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountObject) ProtoMessage() {}

func (x *UserAccountObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountObject.ProtoReflect.Descriptor instead.
func (*UserAccountObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{17}
}

func (x *UserAccountObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserAccountObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *UserAccountObject) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAccountObject) GetAccountLogin() string {
	if x != nil {
		return x.AccountLogin
	}
	return ""
}

func (x *UserAccountObject) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *UserAccountObject) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserAccountObject) GetIsServiceAccount() bool {
	if x != nil {
		return x.IsServiceAccount
	}
	return false
}

func (x *UserAccountObject) GetIsPrivileged() bool {
	if x != nil {
		return x.IsPrivileged
	}
	return false
}

func (x *UserAccountObject) GetCanEscalatePrivs() bool {
	if x != nil {
		return x.CanEscalatePrivs
	}
	return false
}

func (x *UserAccountObject) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *UserAccountObject) GetAccountCreated() string {
	if x != nil {
		return x.AccountCreated
	}
	return ""
}

func (x *UserAccountObject) GetAccountExpires() string {
	if x != nil {
		return x.AccountExpires
	}
	return ""
}

func (x *UserAccountObject) GetPasswordLastChanged() string {
	if x != nil {
		return x.PasswordLastChanged
	}
	return ""
}

func (x *UserAccountObject) GetAccountFirstLogin() string {
	if x != nil {
		return x.AccountFirstLogin
	}
	return ""
}

func (x *UserAccountObject) GetAccountLastLogin() string {
	if x != nil {
		return x.AccountLastLogin
	}
	return ""
}

// The Registry Key Object represents the properties of
// a Windows registry key.
type WindowsRegistryKeyObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions      []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	Key             string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Values          []string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	Modified        string   `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	CreatorUserRef  string   `protobuf:"bytes,6,opt,name=creator_user_ref,json=creatorUserRef,proto3" json:"creator_user_ref,omitempty"`
	NumberOfSubkeys int64    `protobuf:"zigzag64,7,opt,name=number_of_subkeys,json=numberOfSubkeys,proto3" json:"number_of_subkeys,omitempty"`
}

func (x *WindowsRegistryKeyObject) Reset() {
	*x = WindowsRegistryKeyObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsRegistryKeyObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsRegistryKeyObject) ProtoMessage() {}

func (x *WindowsRegistryKeyObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsRegistryKeyObject.ProtoReflect.Descriptor instead.
func (*WindowsRegistryKeyObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{18}
}

func (x *WindowsRegistryKeyObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WindowsRegistryKeyObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *WindowsRegistryKeyObject) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WindowsRegistryKeyObject) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *WindowsRegistryKeyObject) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *WindowsRegistryKeyObject) GetCreatorUserRef() string {
	if x != nil {
		return x.CreatorUserRef
	}
	return ""
}

func (x *WindowsRegistryKeyObject) GetNumberOfSubkeys() int64 {
	if x != nil {
		return x.NumberOfSubkeys
	}
	return 0
}

// The X.509 Certificate Object represents the properties of
// an X.509 certificate, as defined by ITU recommendation
// X.509 [X.509]
type X509CertificateObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Extensions                []string          `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
	IsSelfSigned              bool              `protobuf:"varint,3,opt,name=is_self_signed,json=isSelfSigned,proto3" json:"is_self_signed,omitempty"`
	Hashes                    map[string]string `protobuf:"bytes,4,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version                   string            `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber              string            `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	SignatureAlgorithm        string            `protobuf:"bytes,7,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signature_algorithm,omitempty"`
	Issuer                    string            `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ValidityNotBefore         string            `protobuf:"bytes,9,opt,name=validity_not_before,json=validityNotBefore,proto3" json:"validity_not_before,omitempty"`
	ValidityNotAfter          string            `protobuf:"bytes,10,opt,name=validity_not_after,json=validityNotAfter,proto3" json:"validity_not_after,omitempty"`
	Subject                   string            `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectPublicKeyAlgorithm string            `protobuf:"bytes,12,opt,name=subject_public_key_algorithm,json=subjectPublicKeyAlgorithm,proto3" json:"subject_public_key_algorithm,omitempty"`
	SubjectPublicKeyModulus   string            `protobuf:"bytes,13,opt,name=subject_public_key_modulus,json=subjectPublicKeyModulus,proto3" json:"subject_public_key_modulus,omitempty"`
	SubjectPublicKeyExponent  int64             `protobuf:"varint,14,opt,name=subject_public_key_exponent,json=subjectPublicKeyExponent,proto3" json:"subject_public_key_exponent,omitempty"`
}

func (x *X509CertificateObject) Reset() {
	*x = X509CertificateObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_observable_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509CertificateObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509CertificateObject) ProtoMessage() {}

func (x *X509CertificateObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_observable_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509CertificateObject.ProtoReflect.Descriptor instead.
func (*X509CertificateObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_observable_proto_rawDescGZIP(), []int{19}
}

func (x *X509CertificateObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *X509CertificateObject) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *X509CertificateObject) GetIsSelfSigned() bool {
	if x != nil {
		return x.IsSelfSigned
	}
	return false
}

func (x *X509CertificateObject) GetHashes() map[string]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *X509CertificateObject) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *X509CertificateObject) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *X509CertificateObject) GetSignatureAlgorithm() string {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return ""
}

func (x *X509CertificateObject) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *X509CertificateObject) GetValidityNotBefore() string {
	if x != nil {
		return x.ValidityNotBefore
	}
	return ""
}

func (x *X509CertificateObject) GetValidityNotAfter() string {
	if x != nil {
		return x.ValidityNotAfter
	}
	return ""
}

func (x *X509CertificateObject) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *X509CertificateObject) GetSubjectPublicKeyAlgorithm() string {
	if x != nil {
		return x.SubjectPublicKeyAlgorithm
	}
	return ""
}

func (x *X509CertificateObject) GetSubjectPublicKeyModulus() string {
	if x != nil {
		return x.SubjectPublicKeyModulus
	}
	return ""
}

func (x *X509CertificateObject) GetSubjectPublicKeyExponent() int64 {
	if x != nil {
		return x.SubjectPublicKeyExponent
	}
	return 0
}

var File_mitre_stix_v2_observable_proto protoreflect.FileDescriptor

var file_mitre_stix_v2_observable_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x69, 0x78, 0x2f, 0x76, 0x32, 0x2f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x22,
	0x92, 0x02, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d,
	0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69,
	0x72, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x66, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x66, 0x22, 0xd1, 0x04, 0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x63, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x63, 0x63, 0x52, 0x65, 0x66, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x4d, 0x49, 0x4d, 0x45, 0x50, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x66, 0x22, 0x3e, 0x0a, 0x14, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4d, 0x49, 0x4d, 0x45, 0x50, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61,
	0x77, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x64,
	0x79, 0x52, 0x61, 0x77, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x05, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d,
	0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x63,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x68, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x66, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x1a, 0x39,
	0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x49, 0x50,
	0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11,
	0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x66, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x73, 0x22, 0x5c, 0x0a,
	0x10, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x0b, 0x4d,
	0x75, 0x74, 0x65, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xd0, 0x05, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x52, 0x65, 0x66, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x73, 0x74, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72,
	0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x64, 0x73,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x70, 0x66, 0x69,
	0x78, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e,
	0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x70, 0x66,
	0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x70, 0x66, 0x69, 0x78, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x66, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x66, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x1a, 0x38, 0x0a, 0x0a, 0x49,
	0x70, 0x66, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x6b, 0x0a, 0x15, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x69, 0x74,
	0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba,
	0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x09, 0x55,
	0x52, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd1, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x63, 0x61, 0x6e, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0xb3, 0x05, 0x0a, 0x15, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e,
	0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x39,
	0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xac, 0x01, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x42,
	0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a,
	0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x69, 0x78, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x74,
	0x69, 0x78, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x4d, 0x53, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x69, 0x74,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x78, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0d, 0x4d, 0x69, 0x74,
	0x72, 0x65, 0x5c, 0x53, 0x74, 0x69, 0x78, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x19, 0x4d, 0x69, 0x74,
	0x72, 0x65, 0x5c, 0x53, 0x74, 0x69, 0x78, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x3a, 0x3a,
	0x53, 0x74, 0x69, 0x78, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mitre_stix_v2_observable_proto_rawDescOnce sync.Once
	file_mitre_stix_v2_observable_proto_rawDescData = file_mitre_stix_v2_observable_proto_rawDesc
)

func file_mitre_stix_v2_observable_proto_rawDescGZIP() []byte {
	file_mitre_stix_v2_observable_proto_rawDescOnce.Do(func() {
		file_mitre_stix_v2_observable_proto_rawDescData = protoimpl.X.CompressGZIP(file_mitre_stix_v2_observable_proto_rawDescData)
	})
	return file_mitre_stix_v2_observable_proto_rawDescData
}

var file_mitre_stix_v2_observable_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_mitre_stix_v2_observable_proto_goTypes = []interface{}{
	(*ArtifactObject)(nil),           // 0: mitre.stix.v2.ArtifactObject
	(*AutonomousSystemObject)(nil),   // 1: mitre.stix.v2.AutonomousSystemObject
	(*DirectoryObject)(nil),          // 2: mitre.stix.v2.DirectoryObject
	(*DomainNameObject)(nil),         // 3: mitre.stix.v2.DomainNameObject
	(*EmailAddressObject)(nil),       // 4: mitre.stix.v2.EmailAddressObject
	(*EmailMessageObject)(nil),       // 5: mitre.stix.v2.EmailMessageObject
	(*EmailHeaderComponent)(nil),     // 6: mitre.stix.v2.EmailHeaderComponent
	(*EmailMIMEPartComponent)(nil),   // 7: mitre.stix.v2.EmailMIMEPartComponent
	(*FileObject)(nil),               // 8: mitre.stix.v2.FileObject
	(*IPv4AddressObject)(nil),        // 9: mitre.stix.v2.IPv4AddressObject
	(*IPv6AddressObject)(nil),        // 10: mitre.stix.v2.IPv6AddressObject
	(*MacAddressObject)(nil),         // 11: mitre.stix.v2.MacAddressObject
	(*MutexObject)(nil),              // 12: mitre.stix.v2.MutexObject
	(*NetworkTrafficObject)(nil),     // 13: mitre.stix.v2.NetworkTrafficObject
	(*ProcessObject)(nil),            // 14: mitre.stix.v2.ProcessObject
	(*SoftwareObject)(nil),           // 15: mitre.stix.v2.SoftwareObject
	(*URLObject)(nil),                // 16: mitre.stix.v2.URLObject
	(*UserAccountObject)(nil),        // 17: mitre.stix.v2.UserAccountObject
	(*WindowsRegistryKeyObject)(nil), // 18: mitre.stix.v2.WindowsRegistryKeyObject
	(*X509CertificateObject)(nil),    // 19: mitre.stix.v2.X509CertificateObject
	nil,                              // 20: mitre.stix.v2.ArtifactObject.HashesEntry
	nil,                              // 21: mitre.stix.v2.FileObject.HashesEntry
	nil,                              // 22: mitre.stix.v2.NetworkTrafficObject.IpfixEntry
	nil,                              // 23: mitre.stix.v2.ProcessObject.EnvironmentVariablesEntry
	nil,                              // 24: mitre.stix.v2.X509CertificateObject.HashesEntry
}
var file_mitre_stix_v2_observable_proto_depIdxs = []int32{
	20, // 0: mitre.stix.v2.ArtifactObject.hashes:type_name -> mitre.stix.v2.ArtifactObject.HashesEntry
	6,  // 1: mitre.stix.v2.EmailMessageObject.additional_headers_fields:type_name -> mitre.stix.v2.EmailHeaderComponent
	7,  // 2: mitre.stix.v2.EmailMessageObject.body_multipart:type_name -> mitre.stix.v2.EmailMIMEPartComponent
	21, // 3: mitre.stix.v2.FileObject.hashes:type_name -> mitre.stix.v2.FileObject.HashesEntry
	22, // 4: mitre.stix.v2.NetworkTrafficObject.ipfix:type_name -> mitre.stix.v2.NetworkTrafficObject.IpfixEntry
	23, // 5: mitre.stix.v2.ProcessObject.environment_variables:type_name -> mitre.stix.v2.ProcessObject.EnvironmentVariablesEntry
	24, // 6: mitre.stix.v2.X509CertificateObject.hashes:type_name -> mitre.stix.v2.X509CertificateObject.HashesEntry
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_mitre_stix_v2_observable_proto_init() }
func file_mitre_stix_v2_observable_proto_init() {
	if File_mitre_stix_v2_observable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mitre_stix_v2_observable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutonomousSystemObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainNameObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAddressObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailMessageObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailHeaderComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailMIMEPartComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4AddressObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv6AddressObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddressObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutexObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkTrafficObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsRegistryKeyObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_observable_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509CertificateObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mitre_stix_v2_observable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mitre_stix_v2_observable_proto_goTypes,
		DependencyIndexes: file_mitre_stix_v2_observable_proto_depIdxs,
		MessageInfos:      file_mitre_stix_v2_observable_proto_msgTypes,
	}.Build()
	File_mitre_stix_v2_observable_proto = out.File
	file_mitre_stix_v2_observable_proto_rawDesc = nil
	file_mitre_stix_v2_observable_proto_goTypes = nil
	file_mitre_stix_v2_observable_proto_depIdxs = nil
}
