// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: mitre/stix/v2/stix.proto

package stixv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// External references is used to link to external resource.
type ExternalReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Url        string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExternalReference) Reset() {
	*x = ExternalReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReference) ProtoMessage() {}

func (x *ExternalReference) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReference.ProtoReflect.Descriptor instead.
func (*ExternalReference) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalReference) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *ExternalReference) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *ExternalReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// KillChainPhase describes which pahse of the kill chain the resource in acting.
type KillChainPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseName     string `protobuf:"bytes,1,opt,name=phase_name,json=phaseName,proto3" json:"phase_name,omitempty"`
	KillChainName string `protobuf:"bytes,2,opt,name=kill_chain_name,json=killChainName,proto3" json:"kill_chain_name,omitempty"`
}

func (x *KillChainPhase) Reset() {
	*x = KillChainPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillChainPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillChainPhase) ProtoMessage() {}

func (x *KillChainPhase) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillChainPhase.ProtoReflect.Descriptor instead.
func (*KillChainPhase) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{1}
}

func (x *KillChainPhase) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *KillChainPhase) GetKillChainName() string {
	if x != nil {
		return x.KillChainName
	}
	return ""
}

// MarkingDefinition ... .
type MarkingDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef   string            `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created        string            `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified       string            `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	DefinitionType string            `protobuf:"bytes,9,opt,name=definition_type,json=definitionType,proto3" json:"definition_type,omitempty"`
	Definitions    map[string]string `protobuf:"bytes,10,rep,name=definitions,proto3" json:"definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MarkingDefinition) Reset() {
	*x = MarkingDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkingDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkingDefinition) ProtoMessage() {}

func (x *MarkingDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkingDefinition.ProtoReflect.Descriptor instead.
func (*MarkingDefinition) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{2}
}

func (x *MarkingDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MarkingDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarkingDefinition) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *MarkingDefinition) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *MarkingDefinition) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *MarkingDefinition) GetDefinitionType() string {
	if x != nil {
		return x.DefinitionType
	}
	return ""
}

func (x *MarkingDefinition) GetDefinitions() map[string]string {
	if x != nil {
		return x.Definitions
	}
	return nil
}

// GranularMarking is used to add annotation on indicators.
type GranularMarking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkingRef string   `protobuf:"bytes,1,opt,name=marking_ref,json=markingRef,proto3" json:"marking_ref,omitempty"`
	Selector   []string `protobuf:"bytes,2,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *GranularMarking) Reset() {
	*x = GranularMarking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GranularMarking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GranularMarking) ProtoMessage() {}

func (x *GranularMarking) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GranularMarking.ProtoReflect.Descriptor instead.
func (*GranularMarking) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{3}
}

func (x *GranularMarking) GetMarkingRef() string {
	if x != nil {
		return x.MarkingRef
	}
	return ""
}

func (x *GranularMarking) GetSelector() []string {
	if x != nil {
		return x.Selector
	}
	return nil
}

// ObservableObject ... .
type ObservableObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ObservableObject) Reset() {
	*x = ObservableObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservableObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservableObject) ProtoMessage() {}

func (x *ObservableObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservableObject.ProtoReflect.Descriptor instead.
func (*ObservableObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{4}
}

func (x *ObservableObject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// A type of Tactics, Techniques, and Procedures (TTP) that describes
// ways threat actors attempt to compromise targets.
type AttackPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	KillChainPhases    []*KillChainPhase    `protobuf:"bytes,13,rep,name=kill_chain_phases,json=killChainPhases,proto3" json:"kill_chain_phases,omitempty"`
}

func (x *AttackPattern) Reset() {
	*x = AttackPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackPattern) ProtoMessage() {}

func (x *AttackPattern) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackPattern.ProtoReflect.Descriptor instead.
func (*AttackPattern) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{5}
}

func (x *AttackPattern) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AttackPattern) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AttackPattern) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *AttackPattern) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *AttackPattern) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *AttackPattern) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *AttackPattern) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AttackPattern) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *AttackPattern) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *AttackPattern) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *AttackPattern) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttackPattern) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttackPattern) GetKillChainPhases() []*KillChainPhase {
	if x != nil {
		return x.KillChainPhases
	}
	return nil
}

// A grouping of adversarial behaviors that describes a set of
// malicious activities or attacks that occur over a period of time
// against a specific set of targets.
type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Aliases            []string             `protobuf:"bytes,13,rep,name=aliases,proto3" json:"aliases,omitempty"`
	FirstSeen          string               `protobuf:"bytes,14,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen           string               `protobuf:"bytes,15,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Objective          string               `protobuf:"bytes,16,opt,name=objective,proto3" json:"objective,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{6}
}

func (x *Campaign) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Campaign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Campaign) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Campaign) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Campaign) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Campaign) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Campaign) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Campaign) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Campaign) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Campaign) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Campaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Campaign) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Campaign) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Campaign) GetFirstSeen() string {
	if x != nil {
		return x.FirstSeen
	}
	return ""
}

func (x *Campaign) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *Campaign) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

// An action taken to either prevent an attack or respond to an attack.
type CourseOfAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CourseOfAction) Reset() {
	*x = CourseOfAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseOfAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseOfAction) ProtoMessage() {}

func (x *CourseOfAction) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseOfAction.ProtoReflect.Descriptor instead.
func (*CourseOfAction) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{7}
}

func (x *CourseOfAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CourseOfAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CourseOfAction) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *CourseOfAction) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *CourseOfAction) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *CourseOfAction) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *CourseOfAction) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CourseOfAction) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *CourseOfAction) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *CourseOfAction) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *CourseOfAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CourseOfAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Individuals, organizations, or groups, as well as classes of
// individuals, organizations, or groups.
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	IdentityClass      string               `protobuf:"bytes,13,opt,name=identity_class,json=identityClass,proto3" json:"identity_class,omitempty"`
	Sectors            []string             `protobuf:"bytes,14,rep,name=sectors,proto3" json:"sectors,omitempty"`
	ContactInformation string               `protobuf:"bytes,15,opt,name=contact_information,json=contactInformation,proto3" json:"contact_information,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{8}
}

func (x *Identity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identity) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Identity) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Identity) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Identity) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Identity) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Identity) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Identity) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Identity) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Identity) GetIdentityClass() string {
	if x != nil {
		return x.IdentityClass
	}
	return ""
}

func (x *Identity) GetSectors() []string {
	if x != nil {
		return x.Sectors
	}
	return nil
}

func (x *Identity) GetContactInformation() string {
	if x != nil {
		return x.ContactInformation
	}
	return ""
}

// Contains a pattern that can be used to detect suspicious or
// malicious cyber activity.
type Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Pattern            string               `protobuf:"bytes,13,opt,name=pattern,proto3" json:"pattern,omitempty"`
	ValidFrom          string               `protobuf:"bytes,14,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidUntil         string               `protobuf:"bytes,15,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	KillChainPhases    []*KillChainPhase    `protobuf:"bytes,16,rep,name=kill_chain_phases,json=killChainPhases,proto3" json:"kill_chain_phases,omitempty"`
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{9}
}

func (x *Indicator) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Indicator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Indicator) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Indicator) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Indicator) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Indicator) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Indicator) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Indicator) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Indicator) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Indicator) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Indicator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Indicator) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Indicator) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Indicator) GetValidFrom() string {
	if x != nil {
		return x.ValidFrom
	}
	return ""
}

func (x *Indicator) GetValidUntil() string {
	if x != nil {
		return x.ValidUntil
	}
	return ""
}

func (x *Indicator) GetKillChainPhases() []*KillChainPhase {
	if x != nil {
		return x.KillChainPhases
	}
	return nil
}

// A grouped set of adversarial behaviors and resources with common
// properties believed to be orchestrated by a single threat actor.
type IntrusionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef         string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created              string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified             string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked              bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels               []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences   []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs    []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings     []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name                 string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Aliases              []string             `protobuf:"bytes,13,rep,name=aliases,proto3" json:"aliases,omitempty"`
	FirstSeen            string               `protobuf:"bytes,14,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen             string               `protobuf:"bytes,15,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Goals                []string             `protobuf:"bytes,16,rep,name=goals,proto3" json:"goals,omitempty"`
	ResourceLevel        string               `protobuf:"bytes,17,opt,name=resource_level,json=resourceLevel,proto3" json:"resource_level,omitempty"`
	PrimaryMotivation    string               `protobuf:"bytes,18,opt,name=primary_motivation,json=primaryMotivation,proto3" json:"primary_motivation,omitempty"`
	SecondaryMotivations []string             `protobuf:"bytes,19,rep,name=secondary_motivations,json=secondaryMotivations,proto3" json:"secondary_motivations,omitempty"`
}

func (x *IntrusionSet) Reset() {
	*x = IntrusionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrusionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrusionSet) ProtoMessage() {}

func (x *IntrusionSet) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrusionSet.ProtoReflect.Descriptor instead.
func (*IntrusionSet) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{10}
}

func (x *IntrusionSet) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IntrusionSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntrusionSet) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *IntrusionSet) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *IntrusionSet) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *IntrusionSet) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *IntrusionSet) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IntrusionSet) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *IntrusionSet) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *IntrusionSet) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *IntrusionSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IntrusionSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IntrusionSet) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *IntrusionSet) GetFirstSeen() string {
	if x != nil {
		return x.FirstSeen
	}
	return ""
}

func (x *IntrusionSet) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *IntrusionSet) GetGoals() []string {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *IntrusionSet) GetResourceLevel() string {
	if x != nil {
		return x.ResourceLevel
	}
	return ""
}

func (x *IntrusionSet) GetPrimaryMotivation() string {
	if x != nil {
		return x.PrimaryMotivation
	}
	return ""
}

func (x *IntrusionSet) GetSecondaryMotivations() []string {
	if x != nil {
		return x.SecondaryMotivations
	}
	return nil
}

// A type of TTP, also known as malicious code and malicious software,
// used to compromise the confidentiality, integrity, or availability
// of a victim’s data or system.
type Malware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	KillChainPhases    []*KillChainPhase    `protobuf:"bytes,13,rep,name=kill_chain_phases,json=killChainPhases,proto3" json:"kill_chain_phases,omitempty"`
}

func (x *Malware) Reset() {
	*x = Malware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Malware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Malware) ProtoMessage() {}

func (x *Malware) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Malware.ProtoReflect.Descriptor instead.
func (*Malware) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{11}
}

func (x *Malware) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Malware) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Malware) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Malware) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Malware) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Malware) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Malware) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Malware) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Malware) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Malware) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Malware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Malware) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Malware) GetKillChainPhases() []*KillChainPhase {
	if x != nil {
		return x.KillChainPhases
	}
	return nil
}

// Conveys information observed on a system or network (e.g., an IP address).
type ObservedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string                      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string                      `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string                      `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string                      `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                        `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string                    `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference        `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string                    `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking          `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	FirstObserved      string                      `protobuf:"bytes,11,opt,name=first_observed,json=firstObserved,proto3" json:"first_observed,omitempty"`
	LastObserved       string                      `protobuf:"bytes,12,opt,name=last_observed,json=lastObserved,proto3" json:"last_observed,omitempty"`
	NumberObserved     int64                       `protobuf:"zigzag64,13,opt,name=number_observed,json=numberObserved,proto3" json:"number_observed,omitempty"`
	Objects            map[int64]*ObservableObject `protobuf:"bytes,14,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObservedData) Reset() {
	*x = ObservedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservedData) ProtoMessage() {}

func (x *ObservedData) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservedData.ProtoReflect.Descriptor instead.
func (*ObservedData) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{12}
}

func (x *ObservedData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ObservedData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObservedData) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *ObservedData) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ObservedData) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *ObservedData) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *ObservedData) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObservedData) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *ObservedData) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *ObservedData) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *ObservedData) GetFirstObserved() string {
	if x != nil {
		return x.FirstObserved
	}
	return ""
}

func (x *ObservedData) GetLastObserved() string {
	if x != nil {
		return x.LastObserved
	}
	return ""
}

func (x *ObservedData) GetNumberObserved() int64 {
	if x != nil {
		return x.NumberObserved
	}
	return 0
}

func (x *ObservedData) GetObjects() map[int64]*ObservableObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

// Collections of threat intelligence focused on one or more topics, such as
// a description of a threat actor, malware, or attack technique, including
// contextual details.
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Published          string               `protobuf:"bytes,13,opt,name=published,proto3" json:"published,omitempty"`
	ObjectRefs         []string             `protobuf:"bytes,14,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{13}
}

func (x *Report) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Report) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Report) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Report) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Report) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Report) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Report) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Report) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Report) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Report) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Report) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Report) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Report) GetPublished() string {
	if x != nil {
		return x.Published
	}
	return ""
}

func (x *Report) GetObjectRefs() []string {
	if x != nil {
		return x.ObjectRefs
	}
	return nil
}

// Individuals, groups, or organizations believed to be operating with
// malicious intent.
type ThreatActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef         string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created              string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified             string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked              bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels               []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences   []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs    []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings     []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name                 string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Aliases              []string             `protobuf:"bytes,13,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Roles                []string             `protobuf:"bytes,14,rep,name=roles,proto3" json:"roles,omitempty"`
	Goals                []string             `protobuf:"bytes,15,rep,name=goals,proto3" json:"goals,omitempty"`
	Sophistication       string               `protobuf:"bytes,16,opt,name=sophistication,proto3" json:"sophistication,omitempty"`
	ResourceLevel        string               `protobuf:"bytes,17,opt,name=resource_level,json=resourceLevel,proto3" json:"resource_level,omitempty"`
	PrimaryMotivation    string               `protobuf:"bytes,18,opt,name=primary_motivation,json=primaryMotivation,proto3" json:"primary_motivation,omitempty"`
	SecondaryMotivations []string             `protobuf:"bytes,19,rep,name=secondary_motivations,json=secondaryMotivations,proto3" json:"secondary_motivations,omitempty"`
	PersonalMotivations  []string             `protobuf:"bytes,20,rep,name=personal_motivations,json=personalMotivations,proto3" json:"personal_motivations,omitempty"`
}

func (x *ThreatActor) Reset() {
	*x = ThreatActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreatActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreatActor) ProtoMessage() {}

func (x *ThreatActor) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreatActor.ProtoReflect.Descriptor instead.
func (*ThreatActor) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{14}
}

func (x *ThreatActor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ThreatActor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThreatActor) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *ThreatActor) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ThreatActor) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *ThreatActor) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *ThreatActor) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ThreatActor) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *ThreatActor) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *ThreatActor) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *ThreatActor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThreatActor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ThreatActor) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *ThreatActor) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ThreatActor) GetGoals() []string {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *ThreatActor) GetSophistication() string {
	if x != nil {
		return x.Sophistication
	}
	return ""
}

func (x *ThreatActor) GetResourceLevel() string {
	if x != nil {
		return x.ResourceLevel
	}
	return ""
}

func (x *ThreatActor) GetPrimaryMotivation() string {
	if x != nil {
		return x.PrimaryMotivation
	}
	return ""
}

func (x *ThreatActor) GetSecondaryMotivations() []string {
	if x != nil {
		return x.SecondaryMotivations
	}
	return nil
}

func (x *ThreatActor) GetPersonalMotivations() []string {
	if x != nil {
		return x.PersonalMotivations
	}
	return nil
}

// Legitimate software that can be used by threat actors to perform attacks.
type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	KillChainPhases    []*KillChainPhase    `protobuf:"bytes,13,rep,name=kill_chain_phases,json=killChainPhases,proto3" json:"kill_chain_phases,omitempty"`
	ToolVersion        string               `protobuf:"bytes,14,opt,name=tool_version,json=toolVersion,proto3" json:"tool_version,omitempty"`
}

func (x *Tool) Reset() {
	*x = Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{15}
}

func (x *Tool) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Tool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tool) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Tool) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Tool) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Tool) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Tool) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Tool) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Tool) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Tool) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Tool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tool) GetKillChainPhases() []*KillChainPhase {
	if x != nil {
		return x.KillChainPhases
	}
	return nil
}

func (x *Tool) GetToolVersion() string {
	if x != nil {
		return x.ToolVersion
	}
	return ""
}

// A mistake in software that can be directly used by a hacker to gain
// access to a system or network.
type Vulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	Name               string               `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{16}
}

func (x *Vulnerability) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Vulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vulnerability) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Vulnerability) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Vulnerability) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Vulnerability) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Vulnerability) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Vulnerability) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Vulnerability) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Vulnerability) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Vulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Used to link two SDOs and to describe how they are related to each other.
type RelationShip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	RelationshipType   string               `protobuf:"bytes,11,opt,name=relationship_type,json=relationshipType,proto3" json:"relationship_type,omitempty"`
	Description        string               `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	SourceRef          string               `protobuf:"bytes,13,opt,name=source_ref,json=sourceRef,proto3" json:"source_ref,omitempty"`
	TargetRef          string               `protobuf:"bytes,14,opt,name=target_ref,json=targetRef,proto3" json:"target_ref,omitempty"`
}

func (x *RelationShip) Reset() {
	*x = RelationShip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationShip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationShip) ProtoMessage() {}

func (x *RelationShip) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationShip.ProtoReflect.Descriptor instead.
func (*RelationShip) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{17}
}

func (x *RelationShip) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelationShip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationShip) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *RelationShip) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RelationShip) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *RelationShip) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *RelationShip) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RelationShip) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *RelationShip) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *RelationShip) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *RelationShip) GetRelationshipType() string {
	if x != nil {
		return x.RelationshipType
	}
	return ""
}

func (x *RelationShip) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelationShip) GetSourceRef() string {
	if x != nil {
		return x.SourceRef
	}
	return ""
}

func (x *RelationShip) GetTargetRef() string {
	if x != nil {
		return x.TargetRef
	}
	return ""
}

// Denotes the belief that an element of CTI was seen (e.g., indicator, malware).
type Sighting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByRef       string               `protobuf:"bytes,3,opt,name=created_by_ref,json=createdByRef,proto3" json:"created_by_ref,omitempty"`
	Created            string               `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified           string               `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Revoked            bool                 `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Labels             []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	ExternalReferences []*ExternalReference `protobuf:"bytes,8,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	ObjectMarkingRefs  []string             `protobuf:"bytes,9,rep,name=object_marking_refs,json=objectMarkingRefs,proto3" json:"object_marking_refs,omitempty"`
	GranularMarkings   []*GranularMarking   `protobuf:"bytes,10,rep,name=granular_markings,json=granularMarkings,proto3" json:"granular_markings,omitempty"`
	FirstSeen          string               `protobuf:"bytes,11,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen           string               `protobuf:"bytes,12,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Count              int64                `protobuf:"zigzag64,13,opt,name=count,proto3" json:"count,omitempty"`
	SightingOfRef      string               `protobuf:"bytes,14,opt,name=sighting_of_ref,json=sightingOfRef,proto3" json:"sighting_of_ref,omitempty"`
	ObservedDataRefs   []string             `protobuf:"bytes,15,rep,name=observed_data_refs,json=observedDataRefs,proto3" json:"observed_data_refs,omitempty"`
	WhereSightedRefs   []string             `protobuf:"bytes,16,rep,name=where_sighted_refs,json=whereSightedRefs,proto3" json:"where_sighted_refs,omitempty"`
	Summary            bool                 `protobuf:"varint,17,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *Sighting) Reset() {
	*x = Sighting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sighting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sighting) ProtoMessage() {}

func (x *Sighting) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sighting.ProtoReflect.Descriptor instead.
func (*Sighting) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{18}
}

func (x *Sighting) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Sighting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sighting) GetCreatedByRef() string {
	if x != nil {
		return x.CreatedByRef
	}
	return ""
}

func (x *Sighting) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Sighting) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *Sighting) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Sighting) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Sighting) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Sighting) GetObjectMarkingRefs() []string {
	if x != nil {
		return x.ObjectMarkingRefs
	}
	return nil
}

func (x *Sighting) GetGranularMarkings() []*GranularMarking {
	if x != nil {
		return x.GranularMarkings
	}
	return nil
}

func (x *Sighting) GetFirstSeen() string {
	if x != nil {
		return x.FirstSeen
	}
	return ""
}

func (x *Sighting) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *Sighting) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Sighting) GetSightingOfRef() string {
	if x != nil {
		return x.SightingOfRef
	}
	return ""
}

func (x *Sighting) GetObservedDataRefs() []string {
	if x != nil {
		return x.ObservedDataRefs
	}
	return nil
}

func (x *Sighting) GetWhereSightedRefs() []string {
	if x != nil {
		return x.WhereSightedRefs
	}
	return nil
}

func (x *Sighting) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

// Bundle represents STIX Object bundle.
type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdos map[string]*DomainObject   `protobuf:"bytes,1,rep,name=sdos,proto3" json:"sdos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sros map[string]*RelationObject `protobuf:"bytes,2,rep,name=sros,proto3" json:"sros,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{19}
}

func (x *Bundle) GetSdos() map[string]*DomainObject {
	if x != nil {
		return x.Sdos
	}
	return nil
}

func (x *Bundle) GetSros() map[string]*RelationObject {
	if x != nil {
		return x.Sros
	}
	return nil
}

// Domain object are nodes of STIX graph.
type DomainObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Object:
	//
	//	*DomainObject_AttackPattern
	//	*DomainObject_Campaign
	//	*DomainObject_CourseOfAction
	//	*DomainObject_Identity
	//	*DomainObject_Indicator
	//	*DomainObject_IntrusionSet
	//	*DomainObject_Malware
	//	*DomainObject_ObservedData
	//	*DomainObject_Report
	//	*DomainObject_ThreatActor
	//	*DomainObject_Tool
	//	*DomainObject_Vulnerability
	Object isDomainObject_Object `protobuf_oneof:"object"`
}

func (x *DomainObject) Reset() {
	*x = DomainObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainObject) ProtoMessage() {}

func (x *DomainObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainObject.ProtoReflect.Descriptor instead.
func (*DomainObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{20}
}

func (m *DomainObject) GetObject() isDomainObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *DomainObject) GetAttackPattern() *AttackPattern {
	if x, ok := x.GetObject().(*DomainObject_AttackPattern); ok {
		return x.AttackPattern
	}
	return nil
}

func (x *DomainObject) GetCampaign() *Campaign {
	if x, ok := x.GetObject().(*DomainObject_Campaign); ok {
		return x.Campaign
	}
	return nil
}

func (x *DomainObject) GetCourseOfAction() *CourseOfAction {
	if x, ok := x.GetObject().(*DomainObject_CourseOfAction); ok {
		return x.CourseOfAction
	}
	return nil
}

func (x *DomainObject) GetIdentity() *Identity {
	if x, ok := x.GetObject().(*DomainObject_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *DomainObject) GetIndicator() *Indicator {
	if x, ok := x.GetObject().(*DomainObject_Indicator); ok {
		return x.Indicator
	}
	return nil
}

func (x *DomainObject) GetIntrusionSet() *IntrusionSet {
	if x, ok := x.GetObject().(*DomainObject_IntrusionSet); ok {
		return x.IntrusionSet
	}
	return nil
}

func (x *DomainObject) GetMalware() *Malware {
	if x, ok := x.GetObject().(*DomainObject_Malware); ok {
		return x.Malware
	}
	return nil
}

func (x *DomainObject) GetObservedData() *ObservedData {
	if x, ok := x.GetObject().(*DomainObject_ObservedData); ok {
		return x.ObservedData
	}
	return nil
}

func (x *DomainObject) GetReport() *Report {
	if x, ok := x.GetObject().(*DomainObject_Report); ok {
		return x.Report
	}
	return nil
}

func (x *DomainObject) GetThreatActor() *ThreatActor {
	if x, ok := x.GetObject().(*DomainObject_ThreatActor); ok {
		return x.ThreatActor
	}
	return nil
}

func (x *DomainObject) GetTool() *Tool {
	if x, ok := x.GetObject().(*DomainObject_Tool); ok {
		return x.Tool
	}
	return nil
}

func (x *DomainObject) GetVulnerability() *Vulnerability {
	if x, ok := x.GetObject().(*DomainObject_Vulnerability); ok {
		return x.Vulnerability
	}
	return nil
}

type isDomainObject_Object interface {
	isDomainObject_Object()
}

type DomainObject_AttackPattern struct {
	AttackPattern *AttackPattern `protobuf:"bytes,1,opt,name=attack_pattern,json=attackPattern,proto3,oneof"`
}

type DomainObject_Campaign struct {
	Campaign *Campaign `protobuf:"bytes,2,opt,name=campaign,proto3,oneof"`
}

type DomainObject_CourseOfAction struct {
	CourseOfAction *CourseOfAction `protobuf:"bytes,3,opt,name=course_of_action,json=courseOfAction,proto3,oneof"`
}

type DomainObject_Identity struct {
	Identity *Identity `protobuf:"bytes,4,opt,name=identity,proto3,oneof"`
}

type DomainObject_Indicator struct {
	Indicator *Indicator `protobuf:"bytes,5,opt,name=indicator,proto3,oneof"`
}

type DomainObject_IntrusionSet struct {
	IntrusionSet *IntrusionSet `protobuf:"bytes,6,opt,name=intrusion_set,json=intrusionSet,proto3,oneof"`
}

type DomainObject_Malware struct {
	Malware *Malware `protobuf:"bytes,7,opt,name=malware,proto3,oneof"`
}

type DomainObject_ObservedData struct {
	ObservedData *ObservedData `protobuf:"bytes,8,opt,name=observed_data,json=observedData,proto3,oneof"`
}

type DomainObject_Report struct {
	Report *Report `protobuf:"bytes,9,opt,name=report,proto3,oneof"`
}

type DomainObject_ThreatActor struct {
	ThreatActor *ThreatActor `protobuf:"bytes,10,opt,name=threat_actor,json=threatActor,proto3,oneof"`
}

type DomainObject_Tool struct {
	Tool *Tool `protobuf:"bytes,11,opt,name=tool,proto3,oneof"`
}

type DomainObject_Vulnerability struct {
	Vulnerability *Vulnerability `protobuf:"bytes,12,opt,name=vulnerability,proto3,oneof"`
}

func (*DomainObject_AttackPattern) isDomainObject_Object() {}

func (*DomainObject_Campaign) isDomainObject_Object() {}

func (*DomainObject_CourseOfAction) isDomainObject_Object() {}

func (*DomainObject_Identity) isDomainObject_Object() {}

func (*DomainObject_Indicator) isDomainObject_Object() {}

func (*DomainObject_IntrusionSet) isDomainObject_Object() {}

func (*DomainObject_Malware) isDomainObject_Object() {}

func (*DomainObject_ObservedData) isDomainObject_Object() {}

func (*DomainObject_Report) isDomainObject_Object() {}

func (*DomainObject_ThreatActor) isDomainObject_Object() {}

func (*DomainObject_Tool) isDomainObject_Object() {}

func (*DomainObject_Vulnerability) isDomainObject_Object() {}

// RelationObject are edges of STIX graph.
type RelationObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Object:
	//
	//	*RelationObject_Relationship
	//	*RelationObject_Sighting
	Object isRelationObject_Object `protobuf_oneof:"object"`
}

func (x *RelationObject) Reset() {
	*x = RelationObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mitre_stix_v2_stix_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationObject) ProtoMessage() {}

func (x *RelationObject) ProtoReflect() protoreflect.Message {
	mi := &file_mitre_stix_v2_stix_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationObject.ProtoReflect.Descriptor instead.
func (*RelationObject) Descriptor() ([]byte, []int) {
	return file_mitre_stix_v2_stix_proto_rawDescGZIP(), []int{21}
}

func (m *RelationObject) GetObject() isRelationObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *RelationObject) GetRelationship() *RelationShip {
	if x, ok := x.GetObject().(*RelationObject_Relationship); ok {
		return x.Relationship
	}
	return nil
}

func (x *RelationObject) GetSighting() *Sighting {
	if x, ok := x.GetObject().(*RelationObject_Sighting); ok {
		return x.Sighting
	}
	return nil
}

type isRelationObject_Object interface {
	isRelationObject_Object()
}

type RelationObject_Relationship struct {
	Relationship *RelationShip `protobuf:"bytes,1,opt,name=relationship,proto3,oneof"`
}

type RelationObject_Sighting struct {
	Sighting *Sighting `protobuf:"bytes,2,opt,name=sighting,proto3,oneof"`
}

func (*RelationObject_Relationship) isRelationObject_Object() {}

func (*RelationObject_Sighting) isRelationObject_Object() {}

var File_mitre_stix_v2_stix_proto protoreflect.FileDescriptor

var file_mitre_stix_v2_stix_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x69, 0x78, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x74, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x22, 0x67, 0x0a, 0x11, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x57, 0x0a, 0x0e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x11,
	0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4e, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x26, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x04, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b,
	0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0f, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x22, 0xb6, 0x04, 0x0a,
	0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b,
	0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e,
	0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a,
	0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb4, 0x04, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69,
	0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x49, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x22, 0xbd, 0x05, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x07, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x73, 0x22, 0xa6, 0x05, 0x0a, 0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x74,
	0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x5b, 0x0a,
	0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x03, 0x0a, 0x06, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69,
	0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x73, 0x22, 0xf1, 0x05, 0x0a,
	0x0b, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f,
	0x70, 0x68, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x70, 0x68, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x6f,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x4d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xac, 0x04, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b,
	0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0f, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xc7, 0x03, 0x0a, 0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x04, 0x0a, 0x0c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x4b, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74,
	0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x22, 0xfc, 0x04, 0x0a, 0x08, 0x53, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x67,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72,
	0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x52,
	0x65, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x53, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xa0, 0x02, 0x0a, 0x06, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x64, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x53, 0x64, 0x6f, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x73, 0x64, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x72, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x53, 0x72,
	0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x72, 0x6f, 0x73, 0x1a, 0x54, 0x0a,
	0x09, 0x53, 0x64, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x09, 0x53, 0x72, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x05, 0x0a, 0x0c,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69,
	0x78, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69,
	0x78, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e,
	0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69,
	0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x74, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12,
	0x44, 0x0a, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x94, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65,
	0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2e,
	0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0xa6, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x69, 0x74, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x69, 0x78, 0x2e, 0x76, 0x32, 0x42, 0x09, 0x53, 0x74,
	0x69, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6e, 0x74, 0x72, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x74,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x74, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x69,
	0x78, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x74, 0x69, 0x78, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x4d, 0x53,
	0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x78, 0x2e, 0x56,
	0x32, 0xca, 0x02, 0x0d, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x5c, 0x53, 0x74, 0x69, 0x78, 0x5c, 0x56,
	0x32, 0xe2, 0x02, 0x19, 0x4d, 0x69, 0x74, 0x72, 0x65, 0x5c, 0x53, 0x74, 0x69, 0x78, 0x5c, 0x56,
	0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f,
	0x4d, 0x69, 0x74, 0x72, 0x65, 0x3a, 0x3a, 0x53, 0x74, 0x69, 0x78, 0x3a, 0x3a, 0x56, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mitre_stix_v2_stix_proto_rawDescOnce sync.Once
	file_mitre_stix_v2_stix_proto_rawDescData = file_mitre_stix_v2_stix_proto_rawDesc
)

func file_mitre_stix_v2_stix_proto_rawDescGZIP() []byte {
	file_mitre_stix_v2_stix_proto_rawDescOnce.Do(func() {
		file_mitre_stix_v2_stix_proto_rawDescData = protoimpl.X.CompressGZIP(file_mitre_stix_v2_stix_proto_rawDescData)
	})
	return file_mitre_stix_v2_stix_proto_rawDescData
}

var file_mitre_stix_v2_stix_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_mitre_stix_v2_stix_proto_goTypes = []interface{}{
	(*ExternalReference)(nil), // 0: mitre.stix.v2.ExternalReference
	(*KillChainPhase)(nil),    // 1: mitre.stix.v2.KillChainPhase
	(*MarkingDefinition)(nil), // 2: mitre.stix.v2.MarkingDefinition
	(*GranularMarking)(nil),   // 3: mitre.stix.v2.GranularMarking
	(*ObservableObject)(nil),  // 4: mitre.stix.v2.ObservableObject
	(*AttackPattern)(nil),     // 5: mitre.stix.v2.AttackPattern
	(*Campaign)(nil),          // 6: mitre.stix.v2.Campaign
	(*CourseOfAction)(nil),    // 7: mitre.stix.v2.CourseOfAction
	(*Identity)(nil),          // 8: mitre.stix.v2.Identity
	(*Indicator)(nil),         // 9: mitre.stix.v2.Indicator
	(*IntrusionSet)(nil),      // 10: mitre.stix.v2.IntrusionSet
	(*Malware)(nil),           // 11: mitre.stix.v2.Malware
	(*ObservedData)(nil),      // 12: mitre.stix.v2.ObservedData
	(*Report)(nil),            // 13: mitre.stix.v2.Report
	(*ThreatActor)(nil),       // 14: mitre.stix.v2.ThreatActor
	(*Tool)(nil),              // 15: mitre.stix.v2.Tool
	(*Vulnerability)(nil),     // 16: mitre.stix.v2.Vulnerability
	(*RelationShip)(nil),      // 17: mitre.stix.v2.RelationShip
	(*Sighting)(nil),          // 18: mitre.stix.v2.Sighting
	(*Bundle)(nil),            // 19: mitre.stix.v2.Bundle
	(*DomainObject)(nil),      // 20: mitre.stix.v2.DomainObject
	(*RelationObject)(nil),    // 21: mitre.stix.v2.RelationObject
	nil,                       // 22: mitre.stix.v2.MarkingDefinition.DefinitionsEntry
	nil,                       // 23: mitre.stix.v2.ObservedData.ObjectsEntry
	nil,                       // 24: mitre.stix.v2.Bundle.SdosEntry
	nil,                       // 25: mitre.stix.v2.Bundle.SrosEntry
}
var file_mitre_stix_v2_stix_proto_depIdxs = []int32{
	22, // 0: mitre.stix.v2.MarkingDefinition.definitions:type_name -> mitre.stix.v2.MarkingDefinition.DefinitionsEntry
	0,  // 1: mitre.stix.v2.AttackPattern.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 2: mitre.stix.v2.AttackPattern.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	1,  // 3: mitre.stix.v2.AttackPattern.kill_chain_phases:type_name -> mitre.stix.v2.KillChainPhase
	0,  // 4: mitre.stix.v2.Campaign.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 5: mitre.stix.v2.Campaign.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 6: mitre.stix.v2.CourseOfAction.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 7: mitre.stix.v2.CourseOfAction.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 8: mitre.stix.v2.Identity.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 9: mitre.stix.v2.Identity.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 10: mitre.stix.v2.Indicator.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 11: mitre.stix.v2.Indicator.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	1,  // 12: mitre.stix.v2.Indicator.kill_chain_phases:type_name -> mitre.stix.v2.KillChainPhase
	0,  // 13: mitre.stix.v2.IntrusionSet.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 14: mitre.stix.v2.IntrusionSet.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 15: mitre.stix.v2.Malware.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 16: mitre.stix.v2.Malware.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	1,  // 17: mitre.stix.v2.Malware.kill_chain_phases:type_name -> mitre.stix.v2.KillChainPhase
	0,  // 18: mitre.stix.v2.ObservedData.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 19: mitre.stix.v2.ObservedData.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	23, // 20: mitre.stix.v2.ObservedData.objects:type_name -> mitre.stix.v2.ObservedData.ObjectsEntry
	0,  // 21: mitre.stix.v2.Report.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 22: mitre.stix.v2.Report.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 23: mitre.stix.v2.ThreatActor.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 24: mitre.stix.v2.ThreatActor.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 25: mitre.stix.v2.Tool.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 26: mitre.stix.v2.Tool.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	1,  // 27: mitre.stix.v2.Tool.kill_chain_phases:type_name -> mitre.stix.v2.KillChainPhase
	0,  // 28: mitre.stix.v2.Vulnerability.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 29: mitre.stix.v2.Vulnerability.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 30: mitre.stix.v2.RelationShip.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 31: mitre.stix.v2.RelationShip.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	0,  // 32: mitre.stix.v2.Sighting.external_references:type_name -> mitre.stix.v2.ExternalReference
	3,  // 33: mitre.stix.v2.Sighting.granular_markings:type_name -> mitre.stix.v2.GranularMarking
	24, // 34: mitre.stix.v2.Bundle.sdos:type_name -> mitre.stix.v2.Bundle.SdosEntry
	25, // 35: mitre.stix.v2.Bundle.sros:type_name -> mitre.stix.v2.Bundle.SrosEntry
	5,  // 36: mitre.stix.v2.DomainObject.attack_pattern:type_name -> mitre.stix.v2.AttackPattern
	6,  // 37: mitre.stix.v2.DomainObject.campaign:type_name -> mitre.stix.v2.Campaign
	7,  // 38: mitre.stix.v2.DomainObject.course_of_action:type_name -> mitre.stix.v2.CourseOfAction
	8,  // 39: mitre.stix.v2.DomainObject.identity:type_name -> mitre.stix.v2.Identity
	9,  // 40: mitre.stix.v2.DomainObject.indicator:type_name -> mitre.stix.v2.Indicator
	10, // 41: mitre.stix.v2.DomainObject.intrusion_set:type_name -> mitre.stix.v2.IntrusionSet
	11, // 42: mitre.stix.v2.DomainObject.malware:type_name -> mitre.stix.v2.Malware
	12, // 43: mitre.stix.v2.DomainObject.observed_data:type_name -> mitre.stix.v2.ObservedData
	13, // 44: mitre.stix.v2.DomainObject.report:type_name -> mitre.stix.v2.Report
	14, // 45: mitre.stix.v2.DomainObject.threat_actor:type_name -> mitre.stix.v2.ThreatActor
	15, // 46: mitre.stix.v2.DomainObject.tool:type_name -> mitre.stix.v2.Tool
	16, // 47: mitre.stix.v2.DomainObject.vulnerability:type_name -> mitre.stix.v2.Vulnerability
	17, // 48: mitre.stix.v2.RelationObject.relationship:type_name -> mitre.stix.v2.RelationShip
	18, // 49: mitre.stix.v2.RelationObject.sighting:type_name -> mitre.stix.v2.Sighting
	4,  // 50: mitre.stix.v2.ObservedData.ObjectsEntry.value:type_name -> mitre.stix.v2.ObservableObject
	20, // 51: mitre.stix.v2.Bundle.SdosEntry.value:type_name -> mitre.stix.v2.DomainObject
	21, // 52: mitre.stix.v2.Bundle.SrosEntry.value:type_name -> mitre.stix.v2.RelationObject
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_mitre_stix_v2_stix_proto_init() }
func file_mitre_stix_v2_stix_proto_init() {
	if File_mitre_stix_v2_stix_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mitre_stix_v2_stix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillChainPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkingDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GranularMarking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservableObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseOfAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrusionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Malware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreatActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationShip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sighting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mitre_stix_v2_stix_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mitre_stix_v2_stix_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*DomainObject_AttackPattern)(nil),
		(*DomainObject_Campaign)(nil),
		(*DomainObject_CourseOfAction)(nil),
		(*DomainObject_Identity)(nil),
		(*DomainObject_Indicator)(nil),
		(*DomainObject_IntrusionSet)(nil),
		(*DomainObject_Malware)(nil),
		(*DomainObject_ObservedData)(nil),
		(*DomainObject_Report)(nil),
		(*DomainObject_ThreatActor)(nil),
		(*DomainObject_Tool)(nil),
		(*DomainObject_Vulnerability)(nil),
	}
	file_mitre_stix_v2_stix_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*RelationObject_Relationship)(nil),
		(*RelationObject_Sighting)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mitre_stix_v2_stix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mitre_stix_v2_stix_proto_goTypes,
		DependencyIndexes: file_mitre_stix_v2_stix_proto_depIdxs,
		MessageInfos:      file_mitre_stix_v2_stix_proto_msgTypes,
	}.Build()
	File_mitre_stix_v2_stix_proto = out.File
	file_mitre_stix_v2_stix_proto_rawDesc = nil
	file_mitre_stix_v2_stix_proto_goTypes = nil
	file_mitre_stix_v2_stix_proto_depIdxs = nil
}
